#+STARTUP: showall
#+STARTUP: indent
#+PROPERTY: header-args :tangle "~/.emacs.d/README.el"

* Table of Contents                                            :TOC:noexport:
- [[#top-level-settings][top level settings]]
- [[#libraries][libraries]]
- [[#appearance][appearance]]
  - [[#page-break-lines][page-break-lines]]
  - [[#dashboard][dashboard]]
  - [[#themes][themes]]
  - [[#leuven-light][leuven light]]
  - [[#moe-dark][moe dark]]
  - [[#catppuccin][catppuccin]]
  - [[#doom-themes][doom-themes]]
  - [[#modus-themes][modus-themes]]
  - [[#solaire-mode][solaire-mode]]
  - [[#modeline][modeline]]
  - [[#load-theme][load theme]]
  - [[#appearance-minor-modes][appearance minor-modes]]
- [[#amdfunctions][amd/functions]]
- [[#evil-mode][evil-mode]]
- [[#evil-mode-extensions][evil-mode extensions]]
- [[#packages-built-in][packages (built-in)]]
  - [[#auto-revert-mode][Auto Revert mode]]
  - [[#recent-files-mode][Recent Files mode]]
  - [[#re-builder][re-builder]]
  - [[#saveplace---save-last-position-in-a-file][saveplace - save last position in a file]]
  - [[#savehist---save-minibuffer-history][savehist - save minibuffer history]]
  - [[#desktop---save-buffers-windows-and-eyebrowse-tabs-between-sessions][desktop - save buffers, windows, and eyebrowse (tabs) between sessions]]
  - [[#dired][dired]]
  - [[#eshell][eshell]]
  - [[#shell][shell]]
  - [[#ansi-color][ansi-color]]
  - [[#compilation][compilation]]
  - [[#calc][calc]]
  - [[#winner---window-layout-undoredo][winner - window layout undo/redo]]
  - [[#eww][eww]]
- [[#vterm][vterm]]
- [[#novel][nov.el]]
- [[#elfeed][elfeed]]
- [[#company-auto-completion][company auto-completion]]
- [[#which-key][which-key]]
- [[#snippets-yasnippet-yankpad][snippets (yasnippet yankpad)]]
- [[#wgrep][wgrep]]
- [[#magit---version-control][magit - version-control]]
  - [[#transient][transient]]
  - [[#ediff][ediff]]
- [[#spell-checking][spell checking]]
- [[#navigation][navigation]]
  - [[#avy][avy]]
  - [[#undo-tree][undo-tree]]
  - [[#tab-bar-mode][tab-bar-mode]]
  - [[#eyebrowse---tabs][eyebrowse - tabs]]
  - [[#ace-window][ace-window]]
  - [[#ace-link][ace-link]]
  - [[#projectile][projectile]]
  - [[#shackle][shackle]]
  - [[#ibuffer][ibuffer]]
  - [[#tmux-window-navigation][tmux-window-navigation]]
  - [[#which-func][which-func]]
- [[#language-major-modes][language major-modes]]
- [[#hydra][hydra]]
- [[#hydra-leader-menus][hydra leader menus]]
  - [[#main-leader-hydra][Main Leader Hydra]]
  - [[#major-mode-leader-hydra-function][Major Mode Leader Hydra Function]]
  - [[#org-hydra][Org Hydra]]
  - [[#emacs-lisp-hydra][Emacs-Lisp Hydra]]
  - [[#rust-mode-hydra][Rust-mode Hydra]]
- [[#completion-frameworks][completion frameworks]]
  - [[#orderless][orderless]]
  - [[#consult][consult]]
  - [[#embark][embark]]
  - [[#vertico][vertico]]
  - [[#marginalia][marginalia]]
  - [[#ivy][ivy]]
  - [[#ivy-xref][ivy-xref]]
  - [[#swiper][swiper]]
  - [[#counsel][counsel]]
  - [[#ivy-posframe][ivy-posframe]]
- [[#helpful][helpful]]
- [[#fun][fun]]
- [[#org][org]]
  - [[#help-docs][Help docs]]
  - [[#use-package-org][use-package org]]
  - [[#org-exports][org exports]]
  - [[#org-capture][org-capture]]
  - [[#kanbanel][kanban.el]]
  - [[#toc-org][toc-org]]
  - [[#org-protocol][org-protocol]]
- [[#elisp-links][elisp links]]
- [[#edit-with-emacs-and-cvim][edit-with-emacs and cvim]]
- [[#view-large-files][view large files]]
- [[#emacs-and-git-on-windows][emacs and git on windows]]
- [[#tramp][tramp]]
- [[#screencast][screencast]]

* top level settings

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t; -*-

  ;;; README.el --- Summary
  ;;; Commentary:
  ;;; Code:

  (use-package emacs
    :init
    ;; Startup buffer
    (setq initial-buffer-choice nil
          ;; nil      = emacs startup screen
          ;; t        = Open *scratch* buffer
          ;; function = call and display returned buffer
          ;; string   = open file or directory
          inhibit-startup-message t
          inhibit-startup-screen t)

    ;; Start Maximized
    ;; (add-to-list 'default-frame-alist '(fullscreen . maximized))

    ;; leader key
    (setq amd/leader-key ",")
    (setq amd/leader-key-insert "C-,")
    (when amd/using-pocketchip
      (setq amd/leader-key "SPC"))

    ;; Echo unfinished keystrokes after 0.2 seconds.
    (setq echo-keystrokes 0.2)

    (setq ring-bell-function (lambda ()))
    (setq recenter-redisplay nil) ;; don't redraw the whole display when recentering

    ;; NOTE: Setting the default here seems to override settings like git-commit-fill-column 70
    ;; (setq-default fill-column 80)

    ;; Get auto line breaks at fill-column - auto-fill-mode
    ;; (add-hook 'text-mode-hook 'turn-on-auto-fill)
    ;; NOTE: toggle-truncate-lines will toggle line wrapping

    ;; Hide the \ at the end of each wrapped line. Don't need it with relative-line-numbers
    (set-display-table-slot standard-display-table 'wrap ?\ )

    ;; Save Tempfiles in a temp dir
    (setq backup-directory-alist `((".*" . ,temporary-file-directory)))
    (setq auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))

    ;; Stop making backup files
    (setq make-backup-files nil)

    (defalias 'yes-or-no-p 'y-or-n-p) ;; no more typing out y.e.s.

    ;; (set-default 'show-trailing-whitespace t)
    (setq delete-trailing-lines nil)

    ;; Indentation
    (setq-default c-basic-indent 2)
    (setq-default tab-width 2)          ;; set tw=4
    (setq-default indent-tabs-mode nil) ;; set expandtab

    ;; Mouse scrolling
    ;; Scroll just one line when hitting bottom of window
    (setq scroll-step 1)
    (setq scroll-conservatively 101)

    (setq mouse-wheel-scroll-amount '(5 ((shift) . 1)) ;; 5 lines at a time
          mouse-wheel-progressive-speed nil ;; don't accelerate scrolling
          mouse-wheel-follow-mouse 't)      ;; scroll window under mouse

    ;; (setq mouse-wheel-flip-direction nil) ;; Swap left/right scroll direction

    ;; Swap up/down scroll direction
    ;; (setq mouse-wheel-down-event 'wheel-up)
    ;; (setq mouse-wheel-up-event 'wheel-down)

    ;; cursor movement lag reduction?
    (setq auto-window-vscroll nil)

    ;; Mac OSX Emacs Settings
    (setq ns-alternate-modifier 'meta
          ns-command-modifier 'meta)

    ;; UTF8 Setup
    (set-language-environment 'utf-8)
    (setq locale-coding-system 'utf-8)

    ;; set the default encoding system
    (prefer-coding-system 'utf-8)
    (setq default-file-name-coding-system 'utf-8)
    (set-default-coding-systems 'utf-8)
    (set-terminal-coding-system 'utf-8)
    (set-keyboard-coding-system 'utf-8)

    (setq buffer-file-coding-system 'utf-8)

    ;; Treat clipboard input as UTF-8 string first; compound text next, etc.
    (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))

    ;; Enable narrowing and erasing buffers
    (put 'narrow-to-region 'disabled nil)
    (put 'erase-buffer 'disabled nil)

    (defun amd/tangle-init ()
      (interactive)
      (require 'ob-tangle)
      (org-babel-tangle-file "~/.emacs.d/README.org" "~/.emacs.d/README.el" "emacs-lisp"))

    (defun amd/take-svg-screenshot ()
      "Take a screenshot and save as an svg (requires cairo support)."
      (interactive)
      (let ((screenshot-filename (format-time-string
                                  "%Y-%m-%d-%H%M%S-emacs.svg"
                                  (current-time))))
        (with-temp-buffer
          (insert (x-export-frames nil 'svg))
          (write-region (point-min) (point-max)
                        (concat
                         (expand-file-name "~/Pictures/") screenshot-filename)))))

    ;; Default font size and name
    (setq amd/font-size (cond
                         ((eq system-type 'gnu/linux) 18.0)
                         ((eq system-type 'darwin) 22.0)
                         (t 18.0))
          amd/font-name "PragmataPro"
          amd/font-antialias t)

    (defun amd/set-font (&optional fsize fname antialias)
      "Set preferred GUI font."
      (interactive)
      (when (display-graphic-p)
        ;; Update amd/font-* variables
        (when fsize
          (setq amd/font-size fsize))
        (when fname
          (setq amd/font-name fname))
        (when antialias
          (setq amd/font-antialias
                (if (eq 'yes antialias)
                    t
                  nil)))

        ;; (format amd/font-name amd/font-size)
        (let ((fspec (font-spec :family amd/font-name :size (float amd/font-size) :antialias amd/font-antialias)))
          (set-frame-font fspec)
          ;; This doesn't work when launching emacs for some reason.
          ;; (add-to-list 'default-frame-alist `(font . ,fspec))
          )

        ;; Determine a good powerline height
        (setq amd/font-dpi 96) ;; default dpi assumption
        ;; query xrdb for existing xft dpi
        (when (eq system-type 'gnu/linux)
          (let ((xrdb-dpi
                 (string-to-number
                  (shell-command-to-string "xrdb -query | grep -i Xft.dpi | cut -f 2"))))
            (if (> xrdb-dpi 0)
                (setq amd/font-dpi xrdb-dpi))))
        ;; Formula: points = pixels * 72 / dpi
        (setq powerline-height
              (floor (* 2.0
                        ;; pixel height from dpi and pt size
                        (* (/ amd/font-dpi 72.0) amd/font-size))))))

    ;; Completion settings (from vertico readme).
    (setq enable-recursive-minibuffers t)
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
                    (replace-regexp-in-string
                     "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                     crm-separator)
                    (car args))
            (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
    ;; Vertico commands are hidden in normal buffers.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    :config
    ;; $PATH
    ;; Erase trailing whitespace before save
    (add-hook 'before-save-hook 'delete-trailing-whitespace)

    (when (memq window-system '(mac ns))
      (exec-path-from-shell-initialize))

    ;; Mouse scrolling
    (if (display-graphic-p)
        ;; Use smooth scrolling in gui mode
        (progn
          (pixel-scroll-precision-mode))
      ;; Enable mouse events in terminal mode
      (progn
        (require 'mouse)
        (xterm-mouse-mode t)))

    ;; Hide tool, scroll and menu bar
    (when (fboundp 'tool-bar-mode) (tool-bar-mode -1))
    (when (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
    (menu-bar-mode -1)

    ;; Examples of setting a font with antialias on or off:
    ;; set-frame-font :size <int>pixel size <float>point size
    ;;
    ;; (set-frame-font (font-spec :name "PragmataPro" :antialias nil :size amd/font-size :weight 'regular))
    ;; (set-frame-font (font-spec :name "Iosevka Term SS17 Light" :antialias t :size 16.0))
    ;; (set-frame-font (font-spec :name "CozetteVector" :antialias nil :size 26.0))

    ;; Set gui font
    (when (display-graphic-p)
      (cond
       ((member "PragmataPro" (font-family-list))
        (amd/set-font amd/font-size "PragmataPro"))
       ((member "Iosevka SS08" (font-family-list))
        (amd/set-font amd/font-size "Iosevka SS08 Light"))
       ((member "Iosevka SS17" (font-family-list))
        (amd/set-font amd/font-size "Iosevka SS17 Light"))
       (t
        (amd/set-font)))))
#+end_src

* libraries

#+begin_src emacs-lisp
  (use-package general
    ;; :config
    ;; (general-auto-unbind-keys t)
    :demand)

  (use-package s)

  (use-package dash)

  (use-package subr-x) ;; needed for string-trim
#+end_src

* appearance

** page-break-lines

#+begin_src emacs-lisp
  (use-package page-break-lines
    :diminish)
#+end_src

** dashboard

#+begin_src emacs-lisp
  (use-package dashboard
    :diminish dashboard-mode
    :demand
    :custom-face
    (dashboard-heading ((t (:inherit (font-lock-string-face bold)))))
    (dashboard-items-face ((t (:weight normal))))
    (dashboard-no-items-face ((t (:weight normal))))
    :custom
    (dashboard-startup-banner 'ascii)
    ;;   (dashboard-banner-ascii "
    ;;  ╭──╮
    ;;   ¯╲ ╲
    ;;     ╲ ╲ Λ──Λ
    ;;      ╲ ( ˇωˇ)
    ;;      ╱   ──.
    ;;     ╱    ⋀ ╲
    ;;    ╱    ╱  ╲ ╲_
    ;;    │   ╱    ╰──╯
    ;;   ╱  ╱ ╲ per
    ;;  (  ( ╲ ╲ my
    ;;  │  │  ╲ ╲ last
    ;;  │  )   ╲ ╲  email
    ;;  | |     ) /
    ;; ╭╯_│     ╰/")
    (dashboard-page-separator "\n\f\n")
    (dashboard-projects-backend 'projectile)
    (dashboard-center-content t)
    (dashboard-vertically-center-content t)
    :init
    (setq dashboard-items
          '((projects . 5)
            (recents . 5)
            ;; (agenda . 5)
            (bookmarks . 5)))
    :general
    (:states '(emacs) :keymaps 'dashboard-mode-map
             "C-p" 'counsel-git
             "n" 'dashboard-next-line
             "e" 'dashboard-previous-line
             "N" 'dashboard-next-section
             "E" 'dashboard-previous-section)
    :config
    (add-hook 'dashboard-mode-hook 'page-break-lines-mode)
    (dashboard-setup-startup-hook))
#+end_src

** themes

#+begin_src emacs-lisp
  ;; (defadvice load-theme (before theme-dont-propagate activate)
  (defun amd/disable-loaded-themes ()
    "Remove custom theme settings so all colors are reset to defaults."
    (interactive)
    (cl-loop for theme-name in custom-enabled-themes
             do (funcall #'disable-theme theme-name)))
#+end_src

** leuven light

#+begin_src emacs-lisp
  ;; For some reason this use-package cause leuven org faces
  ;; to be set that appear when other themes are loaded.

  (use-package leuven-theme
    :custom
    (leuven-scale-org-agenda-structure nil)
    (leuven-scale-outline-headlines nil))

  (defun amd/leuven-light-theme ()
    "Light background theme"
    (interactive)
    (amd/disable-loaded-themes)
    (load-theme 'leuven t)
    (when (featurep 'airline-themes)
     ;; (load-theme 'airline-qwq t)
     (load-theme 'airline-base16_atelier_cave_light t))
    (custom-theme-set-faces
     'leuven
     ;; '(org-level-1 ((t (:height 1.3 :weight bold :slant normal :foreground "#875fff" :underline nil))) t)
     ;; '(org-level-2 ((t (:height 1.1 :weight bold :slant normal :foreground "#005fff" :underline nil))) t)
     ;; '(org-level-3 ((t (:height 1.0 :weight bold :slant normal :foreground "#00875f" :underline nil))) t)

     ;; '(magit-section-heading ((t (:foreground "#483d8b"))) t)
     ;; '(magit-section-heading-selection ((t (:foreground "#6a5acd"))) t)

     '(rainbow-delimiters-depth-1-face ((t (:foreground "#aa88ff" :weight bold))) t)
     '(rainbow-delimiters-depth-2-face ((t (:foreground "#88aaff" :weight bold))) t)
     '(rainbow-delimiters-depth-3-face ((t (:foreground "#88ffff" :weight bold))) t)
     '(rainbow-delimiters-depth-4-face ((t (:foreground "#66ffaa" :weight bold))) t)
     '(rainbow-delimiters-depth-5-face ((t (:foreground "#ffff66" :weight bold))) t)
     '(rainbow-delimiters-depth-6-face ((t (:foreground "#ffaa00" :weight bold))) t)
     '(rainbow-delimiters-depth-7-face ((t (:foreground "#ff6666" :weight bold))) t)
     '(rainbow-delimiters-depth-8-face ((t (:foreground "#ff66aa" :weight bold))) t)

     ;; lavender experiment
     ;; ;; '(default ((t (:foreground "#333333" :background "#F5F5F5"))) t)
     ;; '(default ((t (:foreground "#E0CEED" :background "#29222E"))) t)
     ;; '(org-block ((t (:foreground "#776385" :background "#160e1b"))) t)
     ;; '(org-block-begin-line ((t (:foreground "#E0CEED" :background "#3A2F42"))) t)
     ;; '(org-block-end-line   ((t (:foreground "#E0CEED" :background "#3A2F42"))) t)
     ;; '(font-lock-keyword-face ((t (:foreground "#A29DFA"))) t)
     ;; '(font-lock-comment-face           ((t (:foreground "#776385" :background "#160e1b"))) t)
     ;; '(fringe ((t (:foreground "#776385" :background "#160e1b"))) t)

     ;; 100% blue faces
     ;; '(comint-highlight-input ((t (:foreground "#ff4500"))) t)
     ;; '(comint-highlight-prompt ((t (:foreground "#ff4500"))) t)
     ;; '(company-tooltip-annotation ((t (:foreground "#ff4500"))) t)
     ;; '(dired-directory ((t (:foreground "#ff4500" :background "#ffffd2" :weight bold))) t)
     ;; '(dired-header ((t (:foreground "#ff4500" :background "#ffffd2" :weight bold))) t)
     ;; '(font-lock-keyword-face ((t (:foreground "#ff4500"))) t)
     ;; '(hydra-face-blue ((t (:foreground "#ff4500" :weight bold))) t)
     ;; '(info-node ((t (:foreground "#ff4500" :underline t))) t)
     ;; '(ivy-subdir ((t (:foreground "#ff4500" :background "#ffffd2" :weight bold))) t)
     ;; '(makey-key-mode-header-face ((t (:foreground "#ff4500"))) t)
     ;; '(org-priority ((t (:foreground "#ff4500"))) t)
     ;; '(wgrep-done-face ((t (:foreground "#ff4500"))) t)
     ;; '(web-mode-keyword-face ((t (:foreground "#ff4500"))) t)
     ;; '(web-mode-css-selector-face ((t (:foreground "#ff4500"))) t)
     ;; '(which-key-group-description-face ((t (:foreground "#ff4500"))) t)

     '(avy-lead-face ((t (:foreground "#ffaf00"))) t)
     '(avy-lead-face-0 ((t (:foreground "#5fd7ff"))) t)
     '(avy-background-face ((t (:background "#eeeeee" :foreground "#a2a2a2"))) t)))
#+end_src

** moe dark

#+begin_src emacs-lisp
  (use-package moe-theme
    :config
    (defun amd/moe-dark-theme ()
      "dark background theme"
      (interactive)
      (amd/disable-loaded-themes)
      (load-theme 'moe-dark t)
      (when (featurep 'airline-themes)
        ;; some alternative airline colors that match
        ;; (load-theme 'airline-onedark t)
        ;; (load-theme 'airline-behelit t)
        (load-theme 'airline-owo t))
      (custom-theme-set-faces
       'moe-dark
       ;; '(default ((t (:background "#000000"))) t)
       '(region ((t (:background "#626262"))) t)

       ;; No Terminal Italics (which is sometimes reverse video)
       ;; see: http://permalink.gmane.org/gmane.comp.terminal-emulators.tmux.user/2347

       '(font-lock-string-face            ((t (:slant normal :foreground "#ffb86c"))) t)
       '(font-lock-comment-delimiter-face ((t (:slant normal :foreground "#6c6c6c"))) t)
       '(font-lock-comment-face           ((t (:slant normal :foreground "#6c6c6c"))) t)

       '(org-document-title
         ((t (:height 1.0 :weight normal :slant normal :foreground "#aa88ff" :underline nil))) t) ;; purple
       '(org-level-1 ((t (:height 1.0 :weight normal :slant normal :foreground "#aa88ff" :underline nil))) t) ;; purple
       '(org-level-2 ((t (:height 1.0 :weight normal :slant normal :foreground "#88aaff" :underline nil))) t) ;; blue
       ;; '(org-level-1 ((t (:height 1.3 :weight bold   :slant normal :foreground "#aa88ff" :background "#3a3a3a" :underline nil :box (:line-width 4 :color "#3a3a3a" :style nil))) t))
       ;; '(org-level-2 ((t (:height 1.1 :weight bold   :slant normal :foreground "#88aaff" :background "#3a3a3a" :underline nil :box (:line-width 4 :color "#3a3a3a" :style nil))) t))
       '(org-level-3 ((t (:height 1.0 :weight normal :slant normal :foreground "#88ffff" :underline nil))) t) ;; cyan
       '(org-level-4 ((t (:height 1.0 :weight normal :slant normal :foreground "#66ffaa" :underline nil))) t) ;; sea-green
       '(org-level-5 ((t (:height 1.0 :weight normal :slant normal :foreground "#ffff66" :underline nil))) t) ;; yellow
       '(org-level-6 ((t (:height 1.0 :weight normal :slant normal :foreground "#ffaa00" :underline nil))) t) ;; orange
       '(org-level-7 ((t (:height 1.0 :weight normal :slant normal :foreground "#ff6666" :underline nil))) t) ;; red
       '(org-level-8 ((t (:height 1.0 :weight normal :slant normal :foreground "#ff66aa" :underline nil))) t) ;; pink

       '(outshine-level-1 ((t (:height 1.0 :weight normal :slant normal :foreground "#aa88ff" :underline nil))) t) ;; purple
       '(outshine-level-2 ((t (:height 1.0 :weight normal :slant normal :foreground "#88aaff" :underline nil))) t) ;; blue
       '(outshine-level-3 ((t (:height 1.0 :weight normal :slant normal :foreground "#88ffff" :underline nil))) t) ;; cyan
       '(outshine-level-4 ((t (:height 1.0 :weight normal :slant normal :foreground "#66ffaa" :underline nil))) t) ;; sea-green
       '(outshine-level-5 ((t (:height 1.0 :weight normal :slant normal :foreground "#ffff66" :underline nil))) t) ;; yellow
       '(outshine-level-6 ((t (:height 1.0 :weight normal :slant normal :foreground "#ffaa00" :underline nil))) t) ;; orange
       '(outshine-level-7 ((t (:height 1.0 :weight normal :slant normal :foreground "#ff6666" :underline nil))) t) ;; red
       '(outshine-level-8 ((t (:height 1.0 :weight normal :slant normal :foreground "#ff66aa" :underline nil))) t) ;; pink

       '(rainbow-delimiters-depth-1-face ((t (:foreground "#aa88ff" :weight bold))) t)
       '(rainbow-delimiters-depth-2-face ((t (:foreground "#88aaff" :weight bold))) t)
       '(rainbow-delimiters-depth-3-face ((t (:foreground "#88ffff" :weight bold))) t)
       '(rainbow-delimiters-depth-4-face ((t (:foreground "#66ffaa" :weight bold))) t)
       '(rainbow-delimiters-depth-5-face ((t (:foreground "#ffff66" :weight bold))) t)
       '(rainbow-delimiters-depth-6-face ((t (:foreground "#ffaa00" :weight bold))) t)
       '(rainbow-delimiters-depth-7-face ((t (:foreground "#ff6666" :weight bold))) t)
       '(rainbow-delimiters-depth-8-face ((t (:foreground "#ff66aa" :weight bold))) t)

       '(ace-jump-face-foreground ((t (:background "color-18" :foreground "#ff8700" :weight bold))) t)

       '(avy-lead-face ((t (:foreground "#ffaf00"))) t)
       '(avy-lead-face-0 ((t (:foreground "#5fd7ff"))) t)

       '(eyebrowse-mode-line-active ((t (:inherit mode-line-emphasis :foreground "#ffff87"))) t)

       '(flycheck-error ((t (:inherit default :background "color-236" :foreground "#ff5f87" :underline t :weight bold))) t)

       '(flyspell-duplicate ((t (:underline "yellow" :weight bold))) t)
       '(flyspell-incorrect ((t (:underline "yellow" :weight bold))) t)

       ;; (if (display-graphic-p)
       '(org-todo ((t (:weight bold :box (:line-width 1 :color nil :style none) :foreground "#ff00ff" ))) t)
       ;; '(org-todo ((t (:weight bold :box (:line-width 1 :color nil :style none) :foreground "color-201" ))) t))

       ;; (if (display-graphic-p)
       '(org-done ((t (:weight bold :box (:line-width 1 :color nil :style none) :foreground "#00ffff"))) t)
       ;; '(org-done ((t (:weight bold :box (:line-width 1 :color nil :style none) :foreground "color-51"))) t))

       '(org-link ((t (:foreground "#87d7ff" :underline t))) t)

       '(org-block-begin-line ((t (:foreground "#5a5a5a" :background "#2e2e2e"))) t)
       '(org-block-end-line ((t (:foreground nil :background nil :inherit 'org-block-begin-line))) t)
       '(org-block ((t (:foreground nil :background nil :inherit nil))) t)

       '(dired-subtree-depth-1-face ((t (:background "#3a3a3a"))) t)
       '(dired-subtree-depth-2-face ((t (:background "#444444"))) t)
       '(dired-subtree-depth-3-face ((t (:background "#4e4e4e"))) t)
       '(dired-subtree-depth-4-face ((t (:background "#585858"))) t)
       '(dired-subtree-depth-5-face ((t (:background "#626262"))) t)
       '(dired-subtree-depth-6-face ((t (:background "#6c6c6c"))) t)

       ;; :overline "#A7A7A7" :foreground "#3C3C3C" :background "#F0F0F0"
       ;; :overline "#123555" :foreground "#123555" :background "#E5F4FB"
       ;; :foreground "#005522" :background "#EFFFEF"
       ;; :foreground "#EA6300"
       ;; :foreground "#E3258D"
       ;; :foreground "#0077CC"
       ;; :foreground "#2EAE2C"
       ;; :foreground "#FD8008"

       '(ediff-current-diff-A ((t (:foreground "gray33" :background "#FFDDDD"))) t)
       '(ediff-current-diff-B ((t (:foreground "gray33" :background "#DDFFDD"))) t)
       '(ediff-current-diff-C ((t (:foreground "black" :background "#00afff"))) t)

       '(ediff-even-diff-A ((t (:background "#4e4e4e"))) t)
       '(ediff-even-diff-B ((t (:background "#4e4e4e"))) t)
       '(ediff-even-diff-C ((t (:background "#4e4e4e"))) t)

       '(ediff-fine-diff-A ((t (:foreground "#af0000" :background "#FFAAAA"))) t)
       '(ediff-fine-diff-B ((t (:foreground "#008000" :background "#55FF55"))) t)

       '(ediff-fine-diff-C ((t (:foreground "black" :background "#ffff5f"))) t)
       '(ediff-odd-diff-A ((t (:background "#4e4e4e"))) t)
       '(ediff-odd-diff-B ((t (:background "#4e4e4e"))) t)
       '(ediff-odd-diff-C ((t (:background "#4e4e4e"))) t)
       '(ediff-odd-diff-Ancestor ((t (:background "#4e4e4e"))) t)

       '(mu4e-unread-face ((t (:weight normal :slant normal :foreground "#66ffaa" :underline nil))) t) ;; purple

       '(mu4e-contact-face ((t (:weight normal :slant normal :foreground "#88aaff" :underline nil))) t) ;; purple
       '(mu4e-header-value-face ((t (:weight normal :slant normal :foreground "#66ffaa" :underline nil))) t) ;; purple
       '(mu4e-special-header-value-face ((t (:weight normal :slant normal :foreground "#66ffaa" :underline nil))) t) ;; purple

       ;; '(header-line ((t (:weight normal :slant normal :foreground "#FFFFFF" :background "#4e4e4e" :underline nil))) t)
       '(header-line ((t (:weight normal :slant normal :foreground "#6c6c6c" :background "#3a3a3a"))) t)

       '(hl-line ((t (:background "#3a3a3a"))) t)
       '(vline ((t (:background "#3a3a3a"))) t)

       '(secondary-selection ((t (:weight normal :slant normal :foreground "#FFFFFF" :background "#5f87ff" :underline nil))) t)
       '(magit-diff-file-heading-highlight ((t (:weight normal :slant normal :foreground "#FFFFFF" :background "#5f87ff" :underline nil))) t)
       '(magit-section-highlight ((t (:weight bold :slant normal))) t)

       '(evil-ex-lazy-highlight ((t (:foreground "#FFFFFF" :background "#5f87ff"))) t)

       ;; ;; ivy-mode
       ;; '(ivy-current-match ((,class (:foreground ,orange-2 :bold t :inherit highlight))) t)
       '(ivy-current-match ((t (:inherit highlight))) t)
       ;; '(ivy-confirm-face ((,class (:foreground ,green-4 :background ,green-00 :bold t))) t)
       ;; '(ivy-subdir ((,class (:foreground ,blue-1 :bold t))) t)
       ;; '(ivy-virtual ((,class (:foreground ,magenta-3))) t)

       ;; '(ivy-minibuffer-match-face-1 ((,class (:background ,blue-1 :foreground ,white-0))) t)
       ;; '(ivy-minibuffer-match-face-2 ((,class (:bold t :background ,green-2 :foreground ,white-0))) t)
       ;; '(ivy-minibuffer-match-face-3 ((,class (:bold t :background ,magenta-2 :foreground ,white-0))) t)
       ;; '(ivy-minibuffer-match-face-4 ((,class (:bold t :background ,cyan-3 :foreground ,white-0))) t)

       ;; ;; swiper
       ;; '(swiper-match-face-1 ((t (:inherit isearch-lazy-highlight-face))) t)
       ;; '(swiper-match-face-2 ((t (:inherit isearch))) t)
       ;; '(swiper-match-face-3 ((t (:inherit match))) t)
       ;; '(swiper-match-face-4 ((t (:inherit isearch-fail))) t)
       '(swiper-line-face    ((t (:inherit highlight))) t)
       '(minibuffer-prompt ((t (:foreground nil :background nil :inherit 'wgrep-reject-face))) t)
       '(dired-header    ((t (:inherit minibuffer-prompt))) t)

       '(lsp-ui-doc-background ((t (:background "#4e4e4e"))) t)

       ;; used for ansi-term and vterm
       '(term-color-black   ((t (:background "#303030" :foreground "#2d2d2d"))) t)
       '(term-color-blue    ((t (:background "#303030" :foreground "#6699cc"))) t)
       '(term-color-cyan    ((t (:background "#303030" :foreground "#66cccc"))) t)
       '(term-color-green   ((t (:background "#303030" :foreground "#99cc99"))) t)
       '(term-color-magenta ((t (:background "#303030" :foreground "#cc99cc"))) t)
       '(term-color-red     ((t (:background "#303030" :foreground "#f2777a"))) t)
       '(term-color-white   ((t (:background "#303030" :foreground "#f2f0ec"))) t)
       '(term-color-yellow  ((t (:background "#303030" :foreground "#ffcc66"))) t))))
#+end_src

** catppuccin

#+begin_src emacs-lisp
  (use-package catppuccin-theme
    :custom
    ;; Dark
    (catppuccin-flavor 'mocha)        ;; High contrast
    ;; (catppuccin-flavor 'macchiato) ;; Low contrast
    ;; Light
    ;; (catppuccin-flavor 'frappe)    ;; High contrast
    ;; (catppuccin-flavor 'latte)     ;; Low contrast

    :config
    (defun amd/catppuccin-theme ()
      "load catppuccin"
      (interactive)
      (amd/disable-loaded-themes)
      (load-theme 'catppuccin t)
      (custom-theme-set-faces
       'catppuccin
       '(ace-jump-face-foreground ((t (:background "color-18" :foreground "#ff8700" :weight bold))) t)
       '(avy-lead-face ((t (:foreground "#ffaf00"))) t)
       '(avy-lead-face-0 ((t (:foreground "#5fd7ff"))) t)
       '(avy-lead-face-1 ((t (:foreground "#66ffaa"))) t)
       '(avy-lead-face-2 ((t (:foreground "#ff6666"))) t))
      (load-theme 'airline-catppuccin_frappe t)))
#+end_src

** doom-themes

#+begin_src emacs-lisp
  (use-package doom-themes
    :custom
    (doom-themes-enable-bold t)
    (doom-themes-enable-italic t)
    :config
    (defun amd/doom-snazzy-theme ()
      "load snazzy"
      (interactive)
      (amd/disable-loaded-themes)
      (load-theme 'doom-snazzy t)
      (when (featurep 'airline-themes)
        (load-theme 'airline-base16_snazzy t))
      (custom-theme-set-faces
       'doom-snazzy
       '(markdown-code-face ((t (:extend t :background "#242631"))) t t)
       '(magit-diff-removed ((t (:foreground "#cc4945" :background "#433b3d"))) t t)
       '(magit-diff-removed-highlight ((t (:foreground "#ff5c57" :background "#433b3d"))) t t)))

    (defun amd/doom-one-theme ()
      "load doom-one-theme and override some colors"
      (interactive)
      (amd/disable-loaded-themes)
      (load-theme 'doom-one t)
      ;; (load-theme 'doom-moonlight t)
      (when (featurep 'airline-themes)
        (load-theme 'airline-onedark t))
      (custom-theme-set-faces
       'doom-one
       '(flyspell-duplicate ((t (:underline "yellow" :weight bold))) t)
       '(flyspell-incorrect ((t (:underline "yellow" :weight bold))) t)
       '(rainbow-delimiters-depth-1-face ((t (:foreground "#aa88ff" :weight bold))) t)
       '(rainbow-delimiters-depth-2-face ((t (:foreground "#88aaff" :weight bold))) t)
       '(rainbow-delimiters-depth-3-face ((t (:foreground "#88ffff" :weight bold))) t)
       '(rainbow-delimiters-depth-4-face ((t (:foreground "#66ffaa" :weight bold))) t)
       '(rainbow-delimiters-depth-5-face ((t (:foreground "#ffff66" :weight bold))) t)
       '(rainbow-delimiters-depth-6-face ((t (:foreground "#ffaa00" :weight bold))) t)
       '(rainbow-delimiters-depth-7-face ((t (:foreground "#ff6666" :weight bold))) t)
       '(rainbow-delimiters-depth-8-face ((t (:foreground "#ff66aa" :weight bold))) t)
       '(tab-bar-tab ((t (:foreground "#1B2229" :background "#51AFEF" :weight bold))) t)
       '(tab-bar-tab-inactive ((t (:foreground "#ABB2BF" :background "#3E4452"))) t)

       ;; '(org-level-1 ((t (:height 1.3 :weight normal :slant normal :foreground "#00B3EF" :background "#21272d" :underline nil :box (:line-width 4 :color "#21272d" :style nil)))) t)
       ;; '(org-level-2 ((t (:height 1.1 :weight normal :slant normal :foreground "#40D3FF" :background "#21272d" :underline nil :box (:line-width 4 :color "#21272d" :style nil)))) t)
       ;; doom-one specific backgrounds
       '(org-level-1 ((t (:height 1.0 :weight normal :slant normal :underline nil :box nil :foreground "#aa88ff" :background "#21272d" :underline nil :box (:line-width 4 :color "#21272d" :style nil)))) t)
       '(org-level-2 ((t (:height 1.0 :weight normal :slant normal :underline nil :box nil :foreground "#88aaff" :background "#21272d" :underline nil :box (:line-width 4 :color "#21272d" :style nil)))) t)
       '(org-level-3 ((t (:height 1.0 :weight normal :slant normal :underline nil :box nil :foreground "#88ffff" :underline nil))) t) ;; cyan
       '(org-level-4 ((t (:height 1.0 :weight normal :slant normal :underline nil :box nil :foreground "#66ffaa" :underline nil))) t) ;; sea-green
       '(org-level-5 ((t (:height 1.0 :weight normal :slant normal :underline nil :box nil :foreground "#ffff66" :underline nil))) t) ;; yellow
       '(org-level-6 ((t (:height 1.0 :weight normal :slant normal :underline nil :box nil :foreground "#ffaa00" :underline nil))) t) ;; orange
       '(org-level-7 ((t (:height 1.0 :weight normal :slant normal :underline nil :box nil :foreground "#ff6666" :underline nil))) t) ;; red
       '(org-level-8 ((t (:height 1.0 :weight normal :slant normal :underline nil :box nil :foreground "#ff66aa" :underline nil))) t) ;; pink
       ;; '(org-block ((t (:foreground nil :background nil :inherit 'org-block-begin-line))) t)
       '(dired-subtree-depth-1-face ((t (:background "#23272e"))) t)
       '(dired-subtree-depth-2-face ((t (:background "#363d47"))) t)
       '(dired-subtree-depth-3-face ((t (:background "#4a5261"))) t)
       '(dired-subtree-depth-4-face ((t (:background "#5d687a"))) t)
       '(dired-subtree-depth-5-face ((t (:background "#717d94"))) t)
       '(dired-subtree-depth-6-face ((t (:background "#8493ad"))) t)
       '(ace-jump-face-foreground ((t (:background "color-18" :foreground "#ff8700" :weight bold))) t)
       '(avy-lead-face ((t (:foreground "#ffaf00"))) t)
       '(avy-lead-face-0 ((t (:foreground "#5fd7ff"))) t)
       '(avy-lead-face-1 ((t (:foreground "#66ffaa"))) t)
       '(avy-lead-face-2 ((t (:foreground "#ff6666"))) t)
       '(eyebrowse-mode-line-active ((t (:foreground "#ECBE7B" :weight bold))) t)
       '(flyspell-duplicate ((t (:underline "yellow" :weight bold))) t)
       '(flyspell-incorrect ((t (:underline "yellow" :weight bold))) t)
       ;; '(secondary-selection ((t (:foreground "#51afef" :background "#181e26"))) t)
       '(lsp-ui-doc-background ((t (:background "#42444a"))) t)
       '(term-color-black   ((t (:background "#303030" :foreground "#2d2d2d"))) t)
       '(term-color-blue    ((t (:background "#303030" :foreground "#6699cc"))) t)
       '(term-color-cyan    ((t (:background "#303030" :foreground "#66cccc"))) t)
       '(term-color-green   ((t (:background "#303030" :foreground "#99cc99"))) t)
       '(term-color-magenta ((t (:background "#303030" :foreground "#cc99cc"))) t)
       '(term-color-red     ((t (:background "#303030" :foreground "#f2777a"))) t)
       '(term-color-white   ((t (:background "#303030" :foreground "#f2f0ec"))) t)
       '(term-color-yellow  ((t (:background "#303030" :foreground "#ffcc66"))) t)

       '(line-number ((t (:weight normal :slant normal :inherit default))) t)
       '(line-number-current-line ((t (:inherit (hl-line default) :slant normal :weight normal))) t))
      (solaire-mode-swap-faces-maybe)))
#+end_src

** modus-themes

#+begin_src emacs-lisp
  (use-package modus-themes
    :config
    (defun amd/modus-light-theme ()
      "load modus-operandi and override some colors"
      (interactive)
      (amd/disable-loaded-themes)
      (load-theme 'modus-operandi t)
      (when (featurep 'airline-themes)
        (load-theme 'airline-qwq t)))

    (defun amd/modus-dark-theme ()
      "load modus-vivendi and override some colors"
      (interactive)
      (amd/disable-loaded-themes)
      (load-theme 'modus-vivendi t)
      (custom-theme-set-faces
       'modus-vivendi
       '(font-lock-comment-face
         ((t (:weight normal :slant normal :inverse-video nil :foreground "#707070" :background "#000000" :inherit default))) t)
       '(line-number
         ((t (:weight normal :slant normal :inherit default))) t)
       '(line-number-current-line
         ((t (:weight normal :slant normal :inherit (hl-line default)))) t))
      (when (featurep 'airline-themes)
        (load-theme 'airline-ouo t))))
#+end_src

** solaire-mode

#+begin_src emacs-lisp
  (use-package solaire-mode
    :demand
    :hook
    ((change-major-mode after-revert ediff-prepare-buffer) . turn-on-solaire-mode)
    (minibufer-setup . solaire-mode-in-minibuffer)
    :init
    :config
    ;; (solaire-mode-swap-faces-maybe)
    (solaire-global-mode +1))
#+end_src

** modeline

#+begin_src emacs-lisp
  (use-package airline-themes
    ;; :disabled
    :load-path "airline-themes"
    :init
    (setq powerline-default-separator 'utf-8)
    ;; (setq powerline-utf-8-separator-left  #x2572
    ;;       powerline-utf-8-separator-right #x2572)
    (setq powerline-utf-8-separator-left  #x20
          powerline-utf-8-separator-right #x20)
    ;; (setq powerline-utf-8-separator-left  #xe0b0
    ;;       powerline-utf-8-separator-right #xe0b2)

    ;; (setq powerline-default-separator nil)
    (setq airline-hide-state-on-inactive-buffers t)
    (setq airline-hide-vc-branch-on-inactive-buffers t)
    (setq airline-hide-eyebrowse-on-inactive-buffers t)
    ;; (setq airline-display-directory 'airline-directory-full)
    (setq airline-display-directory 'airline-directory-shortened)
    ;; (setq airline-display-directory nil)
    (setq airline-eshell-colors t)
    ;; (setq airline-utf-glyph-separator-left      #x20)
    ;; (setq airline-utf-glyph-separator-right     #x20)
    ;; (setq airline-utf-glyph-subseparator-left   #x20)
    ;; (setq airline-utf-glyph-subseparator-right  #x20)
    ;; (setq airline-utf-glyph-branch              #xe0a0)
    ;; (setq airline-utf-glyph-readonly            #xe0a2)
    ;; (setq airline-utf-glyph-linenumber          #xe0a1)
    (setq airline-shortened-directory-length 16))

  (use-package powerline)

  (use-package doom-modeline
    :disabled
    :custom
    ;; TODO: change evil-*-state-tags to the full NAME
    (doom-modeline-bar-width 8) ;; fringe width/2
    (doom-modeline-icon nil)
    ;; TODO: force height to be (frame-char-height)
    ;;   This seems to always multiply
    ;;   (if doom-modeline-icon 1.68 1.25) by the (frame-char-height)
    (doom-modeline-height 1)
    :init
    :hook (after-init . doom-modeline-mode))
#+end_src

** load theme

#+begin_src emacs-lisp
  ;; (amd/leuven-light-theme)
  ;; (amd/moe-dark-theme)

  ;; (amd/doom-snazzy-theme)
  ;; (amd/doom-one-theme)
  ;; (load-theme 'airline-doom-one t)

  (amd/catppuccin-theme)

  ;; (amd/modus-light-theme)
  ;; (amd/modus-dark-theme)

  ;; (load-theme 'doom-palenight)
  ;; (custom-theme-set-faces
  ;;  'doom-palenight
  ;;  '(org-level-1 ((t (:inherit nil :height 1.0 :weight normal :slant normal :underline nil :box nil :foreground "#aa88ff" :background "#21272d" :underline nil :box (:line-width 4 :color "#21272d" :style nil)))) t)
  ;;  '(org-level-2 ((t (:inherit nil :height 1.0 :weight normal :slant normal :underline nil :box nil :foreground "#88aaff" :background "#21272d" :underline nil :box (:line-width 4 :color "#21272d" :style nil)))) t)
  ;;  '(org-level-3 ((t (:inherit nil :height 1.0 :weight normal :slant normal :underline nil :box nil :foreground "#88ffff" :underline nil))) t) ;; cyan
  ;;  '(org-level-4 ((t (:inherit nil :height 1.0 :weight normal :slant normal :underline nil :box nil :foreground "#66ffaa" :underline nil))) t) ;; sea-green
  ;;  '(org-level-5 ((t (:inherit nil :height 1.0 :weight normal :slant normal :underline nil :box nil :foreground "#ffff66" :underline nil))) t) ;; yellow
  ;;  '(org-level-6 ((t (:inherit nil :height 1.0 :weight normal :slant normal :underline nil :box nil :foreground "#ffaa00" :underline nil))) t) ;; orange
  ;;  '(org-level-7 ((t (:inherit nil :height 1.0 :weight normal :slant normal :underline nil :box nil :foreground "#ff6666" :underline nil))) t) ;; red
  ;;  '(org-level-8 ((t (:inherit nil :height 1.0 :weight normal :slant normal :underline nil :box nil :foreground "#ff66aa" :underline nil))) t) ;; pink
  ;;  )

  ;; (load-theme 'airline-base16_material_palenight t)
  ;; (custom-theme-set-faces
  ;;  'airline-base16_material_palenight
  ;;  '(tab-bar-tab-inactive ((t (:foreground "#32374D":background "#444267" :inherit))) t))
#+end_src

** appearance minor-modes

Setup a list of major-modes to load appearance minor-modes. ~eval-and-compile~
is used so the list is accessible inside use-package definitions.

#+begin_src emacs-lisp
  (eval-and-compile
    (setq amd/appearance-modes nil)
    (setq amd/appearance-mode-hooks
          '(ruby-mode-hook
            c-mode-common-hook
            c++-mode-hook
            rust-mode-hook
            python-mode-hook
            lua-mode-hook
            emacs-lisp-mode-hook
            latex-mode-hook
            js2-mode-hook
            makefile-mode
            ;; nxml-mode-hook
            ;; sql-mode-hook
            sh-mode-hook)))

  (defun amd/add-appearance-mode (mode-to-add)
    "Add MODE-TO-ADD to all hooks defined in amd/appearance-mode-hooks."
    (add-to-list 'amd/appearance-modes mode-to-add)
    (cl-loop for this-mode in amd/appearance-mode-hooks
             collect (add-hook this-mode mode-to-add)))

  ;; manually run appearance modes
  (defun amd/set-appearance-modes ()
    "Manually run preffered appearance modes."
    (interactive)
    (cl-loop for this-mode in amd/appearance-modes
             do (funcall this-mode 1)))
#+end_src

*** hl-line

Highlight the current line using the built-in ~hl-line-mode~.

#+begin_src emacs-lisp
  (use-package hl-line
    :config
    (amd/add-appearance-mode 'hl-line-mode))
#+end_src

*** fill-column-indicator

#+begin_src emacs-lisp
  (use-package fill-column-indicator
    ;; :init
    ;; (unless (or amd/using-pocketchip amd/using-android)
    ;;   (amd/add-appearance-mode 'fci-mode))
    :commands (fci-mode))
#+end_src

*** highlight-indent-guides

#+begin_src emacs-lisp
  (use-package highlight-indent-guides
    :custom
    (highlight-indent-guides-method 'character)
    (highlight-indent-guides-responsive 'top)
    ;; (highlight-indent-guides-delay 3)
    (highlight-indent-guides-character ?\│))
#+end_src

*** display-line-numbers-mode

#+begin_src emacs-lisp
  (use-package display-line-numbers
    :custom
    (display-line-numbers-type t) ;; t=absolute 'relative 'visual
    (display-line-numbers-current-absolute t))
#+end_src

*** color-identifiers

This mode gives variables names unique colors.

#+begin_src emacs-lisp
  (use-package color-identifiers-mode ;; the package is actually called "color-identifiers-mode" with -mode at the end
    :commands (color-identifiers-mode)
    :diminish color-identifiers-mode
    :init
    (amd/add-appearance-mode 'color-identifiers-mode)
    :config
    ;; (add-to-list
    ;;  'color-identifiers:modes-alist
    ;;  `(lua-mode . ("[^.][[:space:]]*"
    ;;                "\\_<\\([a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\)"
    ;;                (nil font-lock-variable-name-face))))
    (setq color-identifiers:num-colors 16))
#+end_src

*** rainbow-delimiters

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :commands (rainbow-delimiters-mode)
    :init
    (amd/add-appearance-mode 'rainbow-delimiters-mode))
#+end_src

* amd/functions

#+begin_src emacs-lisp
  (define-minor-mode amd-center-buffer-mode
    "Buffer local minor mode for amd-center-buffer"
    :init-value nil
    :lighter ""
    :keymap (make-sparse-keymap) ;; defines amd-center-buffer-mode-map
    :group 'amd-center-buffer
    (if (bound-and-true-p amd-center-buffer-mode)
        (amd/center-buffer 100)
      (amd/center-buffer-disable)))

  ;; (defun amd-center-buffer-mode-install () (amd-center-buffer-mode 1))
  ;; (define-globalized-minor-mode global-amd-center-buffer-mode
  ;;   amd-center-buffer-mode amd-center-buffer-mode-install
  ;;   "Global minor mode of amd-center-buffer-mode.")

  (defun amd/center-buffer-disable ()
    (interactive)
    (setq-local left-margin-width nil
                right-margin-width nil)
    (set-window-buffer (selected-window) (current-buffer)))

  (defun amd/center-buffer (width)
    (interactive "nBuffer width: ")
    (let* ((adj (- (window-text-width)
                   width))
           (total-margin (+ adj
                            (or 0 left-margin-width)
                            (or 0 right-margin-width))))
      (setq-local left-margin-width  (/ total-margin 2))
      (setq-local right-margin-width (- total-margin left-margin-width)))
    (set-window-buffer (selected-window) (current-buffer)))

  (defun amd/run-lisp-love ()
    (interactive)
    (run-lisp "love ."))

  (defun amd/copy-buffer ()
    "Copy entire buffer to clipboard"
    (interactive)
    (clipboard-kill-ring-save (point-min) (point-max)))

  (defun amd/recompile-all-elpa-packages ()
    "Recompile elc files"
    (interactive)
    (byte-recompile-directory "~/.emacs.d/elpa/" 0 t))

  (defun make-parent-directory ()
    "Make sure the directory of `buffer-file-name' exists."
    (make-directory (file-name-directory buffer-file-name) t))

  ;; Create parent directories if they don't exist on new files
  (add-hook 'find-file-not-found-functions #'make-parent-directory)

  (defun run-love2d ()
     "run love2d"
     (interactive)
     (async-shell-command (format "cd %s && love ." (projectile-project-root))))

  (defun run-pico8 ()
     "run a pico-8 cartridge then revert buffer"
     (interactive)
     (let ((current-file-path (file-name-base (buffer-file-name (current-buffer))))
           (pico8-command     (cond ((eq system-type 'cygwin)
                                     ;; "/home/anthony/pico-8_win32/pico8.exe -windowed 1 -home C:/cygwin64/home/anthony/heliopause-pico-8 "
                                     "/home/anthony/pico-8_win32/pico8.exe -windowed 1 -home 'C:\cygwin64\home\anthony\heliopause-pico-8' -run ")
                                    ((eq system-type 'windows-nt)
                                     "c:/Users/anthony/pico-8_win32/pico8.exe -windowed 1 -home C:\\Users\\anthony\\heliopause-pico-8 -run ")
                                    (amd/using-pocketchip
                                     "/usr/lib/pico-8/pico8 -run ")
                                    (t
                                     "/home/anthony/apps/pico-8/pico8 -run "))))
       (save-buffer)
       (shell-command (concat pico8-command current-file-path))
       ;; (shell-command pico8-command)
       (revert-buffer nil t)))

  (defun run-current-test (&optional line-no only-run-file)
    (interactive)
    (let ((test-file-window (selected-window))
          (test-file-path   (buffer-file-name (current-buffer)))
          (test-command
           (cond (only-run-file "")
                 ((string-match "_spec.rb$" (buffer-file-name (current-buffer)))
                  "~/.rbenv/shims/ruby ./bin/rspec ")
                 ((string-match ".py$" (buffer-file-name (current-buffer)))
                  "py.test -v --doctest-modules ")
                 ((string-match ".moon$" (buffer-file-name (current-buffer))) "moon ")
                 (t
                  "unknown_test_framework")))
          (rspec-buffer     (get-buffer-window "*rspec*")))
      ;; if the rspec buffer is open
      (if rspec-buffer
          ;; switch focus to it
          (select-window rspec-buffer)
        (progn
          ;; otherwise create a split and switch focus to it
          (select-window (split-window-right))
          (evil-window-move-far-right)
          ;; open the rspec-buffer
          (switch-to-buffer "*rspec*")))
      (erase-buffer)
      (shell-command
       (concat "cd " (projectile-project-root) " && "
               test-command
               test-file-path " &") "*rspec*")
      (evil-normal-state)
      (select-window test-file-window)))

  ;; (defun insert-tab-wrapper ()
  ;;   (interactive)
  ;;   (if (string-match "^[ \t]+$" (buffer-substring-no-properties (line-beginning-position) (line-end-position)))
  ;;       (insert (kbd "TAB"))
  ;;     (evil-complete-previous)))

  (defun what-face (pos)
    (interactive "d")
    (let ((face (or (get-char-property (point) 'read-face-name)
                    (get-char-property (point) 'face))))
      (if face
          (let ((face-string (format "%s" face)))
            (kill-new face-string )
            (message "Copied Face: %s" face))
        (message "No face at %d" pos))))

  ;; Rename file https://sites.google.com/site/steveyegge2/my-dot-emacs-file
  (defun rename-file-and-buffer (new-name)
    "Renames both current buffer and file it's visiting to NEW-NAME."
    (interactive (list (read-string "New name:" (buffer-name))))
    (let ((name (buffer-name))
          (filename (buffer-file-name)))
      (if (not filename)
          (message "Buffer '%s' is not visiting a file!" name)
        (if (get-buffer new-name)
            (message "A buffer named '%s' already exists!" new-name)
          (progn
            (rename-file name new-name 1)
            (rename-buffer new-name)
            (set-visited-file-name new-name)
            (set-buffer-modified-p nil))))))

  ;; Line Bubble Functions
  (defun move-line-up ()
    "move the current line up one line"
    (interactive)
    (transpose-lines 1)
    (previous-line 2))

  (defun move-line-down ()
    "move the current line down one line"
    (interactive)
    (next-line 1)
    (transpose-lines 1)
    (previous-line 1))

  (defun evil-move-lines-up (beg end)
    "Move selected lines up one line."
    (interactive "r")
    (evil-move-lines beg end t))

  (defun evil-move-lines-down (beg end)
    "Move selected lines down one line."
    (interactive "r")
    (evil-move-lines beg end))

  (defun evil-move-lines (beg end &optional move-up)
    "Move selected lines up or down."
    (let ((text (delete-and-extract-region beg end)))
      (if move-up
          (beginning-of-line 0)  ;; move to the beginning of the previous line
          (beginning-of-line 2)) ;; move to the beginning of the next line
      (insert text)
      (forward-char -1)
      (evil-visual-line (- (point) (string-width text)) (point))))

  (defun evil-eval-print-last-sexp ()
    "Eval print when in evil-normal-state."
    (interactive) (forward-char) (previous-line) (eval-print-last-sexp))

  (defun align-no-repeat (start end regexp)
    "Alignment with respect to the given regular expression."
    (interactive "r\nsAlign regexp: ")
    (align-regexp start end
                  (concat "\\(\\s-*\\)" regexp) 1 1 nil))

  (defun align-repeat (start end regexp)
    "Repeat alignment with respect to the given regular expression."
    (interactive "r\nsAlign regexp: ")
    (align-regexp start end
                  (concat "\\(\\s-*\\)" regexp) 1 1 t))

  (defun align-to-space (begin end)
    "Align region to spaces"
    (interactive "r")
    (align-regexp begin end
                  (rx (group (one-or-more (syntax whitespace))) ) 1 1 t)
    (evil-indent begin end))

  (defun align-to-comma (begin end)
    "Align region to comma signs"
    (interactive "r")
    (align-regexp begin end
                  (rx "," (group (zero-or-more (syntax whitespace))) ) 1 1 t))

  (defun align-to-colon (begin end)
    "Align region to colon"
    (interactive "r")
    (align-regexp begin end
                  (rx ":" (group (zero-or-more (syntax whitespace))) ) 1 1 ))

  (defun align-to-equals (begin end)
    "Align region to equal signs"
    (interactive "r")
    (align-regexp begin end
                  (rx (group (zero-or-more (syntax whitespace))) "=") 1 1 ))

  (defun align-interactively ()
    "invoke align-regexp interactively"
    (interactive)
    (let ((current-prefix-arg 4)) ;; emulate C-u
      (call-interactively 'align-regexp)))

  (defun amd/x-paste ()
    "Paste from the x clipboard with xsel."
    (interactive)
    (insert (shell-command-to-string "xsel -o -b")))

  (defun amd/x-yank (begin end)
    "Yank to the x clipboard with xsel."
    (interactive "r")
    (shell-command-on-region begin end "xsel -i -b"))

  (defun amd/edebug-eval-defun ()
    "Run eval-defun with C-u."
    (interactive)
    (let ((current-prefix-arg 4)) ;; emulate C-u
      (call-interactively 'eval-defun)))

  (defvar rgbxmlcolour-keywords
    '(("r=\"[0-9]+\" +g=\"[0-9]+\" +b=\"[0-9]+\""
       (0 (put-text-property (match-beginning 0)
                             (match-end 0)
                             'face (list :background
                                         (cl-loop
                                          for color
                                          in (split-string (replace-regexp-in-string "[rgb=\" ]+" " " (match-string-no-properties 0)) " " t)
                                          concat (format "%02X" (string-to-number color)) into colorcode
                                          finally return (concat "#" (downcase colorcode)))
                                         ))))))

  (defun rgb-to-hex-comment (beg end)
    (interactive "r")
    (save-excursion
      (goto-char beg)
      (while (re-search-forward "r=\"[0-9]+\" g=\"[0-9]+\" b=\"[0-9]+\"" end)
        (let* ((selected-text (match-string-no-properties 0))
               (hex-color-text (cl-loop
                                for color
                                in (split-string (replace-regexp-in-string "[rgb=\" ]+" " " selected-text) " " t)
                                concat (format "%02X" (string-to-number color)) into colorcode
                                finally return (concat "#" colorcode)))
               )
          (end-of-line)
          (insert " <!-- ")
          (insert hex-color-text)
          (insert " -->")))))

  (defun rgbxmlcolour-add-to-font-lock ()
    (interactive)
    (font-lock-add-keywords nil rgbxmlcolour-keywords))

  (defvar hexcolour-keywords
    '(("#[abcdef[:digit:]]\\{6\\}"
       (0 (put-text-property (match-beginning 0)
                             (match-end 0)
                             'face (list :background
                                         (match-string-no-properties 0)))))))

  (defun hexcolour-add-to-font-lock ()
    (interactive)
    (font-lock-add-keywords nil hexcolour-keywords))

  (use-package css-mode
    :config
    (add-hook 'css-mode-hook 'hexcolour-add-to-font-lock))
#+end_src

* evil-mode

#+begin_src emacs-lisp
  (use-package evil
    :demand
    :after undo-tree
    :custom
    (evil-undo-system 'undo-tree)
    (x-select-enable-clipboard t)
    (x-select-enable-clipboard-manager nil)
    (evil-regexp-search t)  ;; Whether to use regular expressions for searching.
    (evil-echo-state nil)  ;; Whether to signal the current state in the echo area.
    (evil-auto-balance-windows nil)  ;; If non-nil window creation and deletion trigger rebalancing.
    (evil-flash-delay .5) ;; Time in seconds to flash search matches after M-x evil-search-next and M-x evil-search-previous.
    (evil-want-fine-undo 'no) ;; All changes made during insert state, including a possible delete after a change operation, are collected in a single undo step.
    (evil-want-C-i-jump 'yes)
    (evil-want-C-u-scroll 'yes)

    ;; Make sure C-w is not a prefix key
    (evil-want-C-w-delete nil)
    (evil-want-C-w-in-emacs-state 'yes)
    (evil-move-cursor-back nil)         ;; Don't move back one charachter when exiting insert
    (evil-search-module 'evil-search)   ;; Need to set this before loading evil and evil-visualstar
    :init

    ;; Make mouse wheel use evil mode C-d and C-u
    (setq mwheel-scroll-down-function 'evil-scroll-down
          mwheel-scroll-up-function 'evil-scroll-up)

    (when amd/using-android ;; don't use the system clipboard
      (setq x-select-enable-clipboard nil))

    (setq-default evil-symbol-word-search t) ;; make * and # search for symbols (instead of words)

    ;; join inner paragraph macro
    (fset 'macro-join-inner-paragraph "vipJ^")
    (fset 'macro-join-inner-paragraph-reflow "vipJVgq^")
    (fset 'key-colon-to-as
          (lambda (&optional arg)
            "Keyboard macro."
            (interactive "p")
            (kmacro-exec-ring-item (quote ([94 100 102 58 36 65 32 97 115 32 escape 112 65 127 44 escape] 0 "%d")) arg)))

    :general
    (:states '(motion)
     ;; hlne movement
     "n" 'evil-next-line
     "e" 'evil-previous-line
     ;; swiper
     "/" 'swiper
     "C-/" 'swiper
     ;; search using isearch
     ;; "/" 'evil-search-forward
     ;; "k" 'evil-search-next
     ;; "K" 'evil-search-previous
     ;; search using evil's search module
     "g /" 'evil-ex-search-forward
     "k" 'evil-ex-search-next
     "K" 'evil-ex-search-previous
     ;; swap * and # to backward and forward respectively
     "*" (lambda () (interactive) (swiper (format "%s" (thing-at-point 'symbol t))))
     ;; "#" (lambda () (interactive) (swiper (format "%s" (thing-at-point 'symbol t))))
     ;; "*" (lambda () (interactive) (swiper (format "\\<%s\\>" (thing-at-point 'symbol t))))
     "#" (lambda () (interactive) (swiper (format "\\<%s\\>" (thing-at-point 'symbol t))))
     ;; "*"   'evil-ex-search-word-backward
     ;; "#"   'evil-ex-search-word-forward
     "g *" 'evil-ex-search-unbounded-word-backward
     "g #" 'evil-ex-search-unbounded-word-forward)
    (:states '(normal)
     "C-s" 'save-buffer
     "C-p" 'counsel-git
     "C-M-t" 'amd/eshell-or-project-eshell
     "C-M-c" 'amd/split-compilation
     "g j" 'amd/join-to-end-of-next-line
     "g s" 'count-words
     "g W" 'macro-join-inner-paragraph
     "g r" 'macro-join-inner-paragraph-reflow
     "C-l" (lambda() (interactive) (evil-ex-nohighlight) (redraw-display))
     "C-e" 'move-line-up
     "C-n" 'move-line-down)
    (:states '(visual)
     "C-e" 'evil-move-lines-up
     "C-n" 'evil-move-lines-down)
    ;; (:states '(insert motion visual emacs)
    ;;  :prefix "C-w"
    ;;  "" nil)
    (:states '(insert)
     "C-s" (lambda() (interactive) (save-buffer) (evil-normal-state))
     "C-M-t" 'amd/eshell-or-project-eshell
     "C-y" 'counsel-yank-pop
     "M-t" 'counsel-ibuffer
     "M-b" 'ibuffer
     "C-x C-l" 'evil-complete-previous-line
     ;; The C-w insert bindings require 'evil-want-C-w-delete nil
     "C-w c" 'evil-window-delete
     "C-w o" 'delete-other-windows
     "C-b" 'yankpad-insert ;; Was evil-scroll-page-up
     "C-t" 'yankpad-insert
     amd/leader-key-insert 'hydra-leader-menu/body)
    (:states '(motion visual)
     "RET" 'evil-ex ;; Enter opens : prompt
     ";" 'evil-ex)  ;; semicolon also enters : prompt
    (:states '(motion visual emacs)
     "C-w m" 'evil-window-set-height
     "M-t" 'switch-to-buffer
     "M-T" 'counsel-ibuffer
     "M-b" 'ibuffer
     "M-d" (lambda() (interactive) (dired-other-window (projectile-project-root)))
     "M-D" (lambda() (interactive) (dired-jump t))
     amd/leader-key 'hydra-leader-menu/body)
    (:states '(motion emacs)
     "C-M-t" 'amd/eshell-or-project-eshell
     "C-M-c" 'amd/split-compilation
     "C-w N" 'evil-window-move-very-bottom
     "C-w E" 'evil-window-move-very-top
     "C-w H" 'evil-window-move-far-left
     "C-w L" 'evil-window-move-far-right
     "C-w u" 'winner-undo
     "C-w d" 'winner-redo)
    (:states '(motion)
     :keymaps 'compilation-mode-map
     "gf" 'find-file-at-point)

    :config
    (add-hook 'evil-local-mode-hook 'turn-on-undo-tree-mode)
    (evil-mode 1)

    ;; (defun amd/get-inner-symbol ()
    ;;   (interactive)
    ;;   ;; (message "%s" (evil-inner-symbol 1)
    ;;   (message "%s" (thing-at-point 'symbol))
    ;; ))

    ;; put the current line at the end of the next line
    (defun amd/join-to-end-of-next-line ()
      (interactive)
      (move-line-down) (join-line))

    ;; ESC changes

    ;; NOTE: ESC is Meta inside a terminal

    (global-unset-key (kbd "ESC ESC ESC"))
    (global-unset-key (kbd "ESC ESC"))

    (defun amd/minibuffer-keyboard-quit ()
      "Abort recursive edit. In Delete Selection mode, if the mark is active, just deactivate it; then it takes a second \\[keyboard-quit] to abort the minibuffer."
      (interactive)
      (if (and delete-selection-mode transient-mark-mode mark-active)
          (setq deactivate-mark  t)
        (when (get-buffer "*Completions*") (delete-windows-on "*Completions*"))
        (abort-recursive-edit)))

    (define-key evil-normal-state-map           [escape] 'keyboard-quit)
    (define-key evil-visual-state-map           [escape] 'keyboard-quit)
    (define-key evil-emacs-state-map            [escape] 'keyboard-quit)
    (define-key minibuffer-local-map            [escape] 'amd/minibuffer-keyboard-quit)
    (define-key minibuffer-local-ns-map         [escape] 'amd/minibuffer-keyboard-quit)
    (define-key minibuffer-local-completion-map [escape] 'amd/minibuffer-keyboard-quit)
    (define-key minibuffer-local-must-match-map [escape] 'amd/minibuffer-keyboard-quit)
    (define-key minibuffer-local-isearch-map    [escape] 'amd/minibuffer-keyboard-quit)

    ;; TODO: this is failing with wrong number of arguments
    ;; Center Screen on search hit
    ;; (advice-add 'evil-ex-search-word-forward            :after #'recenter)
    ;; (advice-add 'evil-ex-search-word-backward           :after #'recenter)
    ;; (advice-add 'evil-ex-search-unbounded-word-forward  :after #'recenter)
    ;; (advice-add 'evil-ex-search-unbounded-word-backward :after #'recenter)
    ;; (advice-add 'evil-ex-search-next                    :after #'recenter)
    ;; (advice-add 'evil-ex-search-previous                :after #'recenter)

    ;; TODO: this is failing with wrong number of arguments
    ;; (advice-add 'evil-jump-forward  :after #'recenter)
    ;; (advice-add 'evil-jump-backward :after #'recenter)

    (add-to-list 'evil-emacs-state-modes 'dashboard-mode)
    (add-to-list 'evil-emacs-state-modes 'dired-mode)
    (add-to-list 'evil-emacs-state-modes 'magit-popup-mode)
    (add-to-list 'evil-emacs-state-modes 'makey-key-mode)

    (add-to-list 'evil-normal-state-modes 'git-commit-mode)

    (add-to-list 'evil-motion-state-modes 'package-menu-mode)
    (add-to-list 'evil-motion-state-modes 'paradox-menu-mode)
    (add-to-list 'evil-motion-state-modes 'flycheck-error-list-mode)

    (add-to-list 'evil-motion-state-modes 'help-mode)
    (add-to-list 'evil-motion-state-modes 'compilation-mode)
    (add-to-list 'evil-motion-state-modes 'woman-mode)

    (add-to-list 'evil-normal-state-modes 'Info-mode)
    (add-to-list 'evil-normal-state-modes 'eww-mode)
    (add-to-list 'evil-normal-state-modes 'Custom-mode)

    ;; Recenter after using history back or forward in Info mode (C-o or TAB).
    (defadvice Info-history-back (after advice-for-Info-history-back activate) (recenter))
    (defadvice Info-history-forward (after advice-for-Info-history-forward activate) (recenter))

    (defun paste-other-window (beg end other-buffer-window-name)
      (let ((current-file-window (selected-window))
            (current-file-path   (buffer-file-name (current-buffer)))
            (text                (buffer-substring-no-properties beg end))
            (other-window        (get-buffer-window other-buffer-window-name)))
        (when sql-buffer
          (select-window other-window)
          (goto-char (point-max))
          (insert text)
          (comint-send-input)
          (select-window current-file-window))))

    (evil-define-operator paste-to-sql (beg end type)
      "Evil operator for pasting text to another buffer."
      :move-point nil
      (interactive "<R>")
      (paste-other-window beg end "*SQL*"))

    (evil-define-key 'motion (current-global-map)
      (kbd "g p s") 'paste-to-sql))
#+end_src

* evil-mode extensions

#+begin_src emacs-lisp
  ;; (use-package evil-visualstar
  ;;   :config
  ;;   (global-evil-visualstar-mode 1))

  (use-package evil-surround
    :after evil
    :config
    (global-evil-surround-mode 1)
    (add-hook
     'web-mode-hook
     (lambda ()
       (add-to-list 'evil-surround-pairs-alist '(?h . ("{{ " . " }}"))  )
       (add-to-list 'evil-surround-pairs-alist '(?= . ("<%= " . " %>")) )
       (add-to-list 'evil-surround-pairs-alist '(?- . ("<% "  . " %>")) ))))

  (use-package evil-matchit
    :after evil
    :config
    (global-evil-matchit-mode 1))

  (use-package evil-commentary
    :after evil
    :diminish
    :config
    (evil-commentary-mode))

  (use-package pico8
    :after evil
    :load-path "pico8")

  (use-package evil-case-operators
    :after evil
    :load-path "evil-case-operators"
    :config
    (global-evil-case-operators-mode 1))

  ;; useful find-replaces
  ;; s/\([^ \n]\)  */\1 /g

  (use-package expand-region
    :after evil
    :general
    (:states '(normal)
      "ge" 'er/expand-region))
#+end_src

* packages (built-in)

** Auto Revert mode

#+begin_src emacs-lisp
  (use-package autorevert
    :diminish auto-revert-mode)
#+end_src

** Recent Files mode

#+begin_src emacs-lisp
  (use-package recentf
    :defer 10
    :custom
    ;; (recentf-auto-cleanup 300)
    (recentf-max-menu-items 30)
    :config
    (recentf-mode 1))
#+end_src

** re-builder

- [[info:emacs#Regexps][info:emacs#Regexps]]
- [[info:emacs#Regexp%20Backslash][info:emacs#Regexp Backslash]]

#+begin_src emacs-lisp
  (use-package re-builder
    :init
    (setq reb-re-syntax 'string))
#+end_src

** saveplace - save last position in a file

#+begin_src emacs-lisp
  (use-package saveplace
    :config
    (save-place-mode)
    ;; Recenter when opening a file.
    ;; TODO: make this work when in an org-src buffer
    (defadvice find-file (after advice-for-find-file activate) (recenter)))
#+end_src

** savehist - save minibuffer history

#+begin_src emacs-lisp
  ;; save minibuffer history
  (use-package savehist
    :custom
    (savehist-autosave-interval 150)
    :config
    (savehist-mode))
#+end_src

** desktop - save buffers, windows, and eyebrowse (tabs) between sessions

#+begin_src emacs-lisp
  (use-package desktop
    :custom
    (desktop-auto-save-timeout 30))
    ;; :config
    ;; (desktop-save-mode 1)
#+end_src

** dired

#+begin_src emacs-lisp
  (use-package dired
    :custom
    ;; Suggest locations for operations, ie midnight commander style copy if another window is open.
    (dired-dwim-target t)
    ;; Auto refresh dired, but be quiet about it
    (dired-auto-revert-buffer t)
    ;; (setq global-auto-revert-non-file-buffers t)
    (auto-revert-verbose nil)
    ;; Always copy/delete recursively
    (dired-recursive-copies 'always)
    (dired-recursive-deletes 'top)
    :init
    (put 'dired-find-alternate-file 'disabled nil)
    (setq wdired-allow-to-change-permissions t)
    (setq insert-directory-program
          (or (executable-find "gls")
              (executable-find "ls")))

    :general
    (:states '(emacs)
     :keymaps 'dired-mode-map
     ;; "f" 'dired-find-file ;; default
     ;; "a" 'dired-find-alternate-file ;; default - open a file in the same buffer and close dired
     "RET" 'amd/dired-open-thing
     "C-p" 'counsel-git
     "C-l" (lambda() (interactive) (revert-buffer) (evil-ex-nohighlight) (recenter))
     "gr" 'revert-buffer
     "gg" 'evil-goto-first-line
     "C-d" 'evil-scroll-down
     "C-u" 'evil-scroll-up
     "gd" 'ora-ediff-files
     "G" 'evil-goto-line
     "/" 'swiper
     "C-/" 'swiper
     ;; default dired-writable mode is C-x C-q
     ;;   press C-c C-c to commit
     "C-c C-w" 'dired-toggle-read-only
     ;; colemak keys
     "h" 'left-char
     "l" 'right-char
     "-" 'dired-up-directory
     "(" 'dired-hide-details-mode
     ")" 'dired-omit-mode
     "e" 'dired-previous-line
     "N" 'dired-next-dirline
     "E" 'dired-prev-dirline)
    :config
    (defun amd/dired-open-thing ()
      "If file at point is a directory open a dired buffer in the same window. Else open in a new window."
      (interactive)
      ;; (if (file-directory-p (dired-get-filename nil t))
      ;;     (dired-find-alternate-file)
      ;;   (dired-find-file-other-window))
      (dired-find-file))

    (defun ora-ediff-files ()
      (interactive)
      (let ((files (dired-get-marked-files))
            (wnd (current-window-configuration)))
        (if (<= (length files) 2)
            (let ((file1 (car files))
                  (file2 (if (cdr files)
                             (cadr files)
                           (read-file-name
                            "file: "
                            (dired-dwim-target-directory)))))
              (if (file-newer-than-file-p file1 file2)
                  (ediff-files file2 file1)
                (ediff-files file1 file2))
              (add-hook 'ediff-after-quit-hook-internal
                        (lambda ()
                          (setq ediff-after-quit-hook-internal nil)
                          (set-window-configuration wnd))))
          (error "No more than 2 files should be marked"))))


    ;; (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)

    ;; (when (or amd/using-android amd/using-pocketchip)
    (add-hook 'dired-mode-hook 'dired-hide-details-mode)
    ;; )

    (defadvice dired-toggle-read-only (after advice-for-dired-toggle-read-only activate)
      (evil-normal-state)))

  (use-package dired-x
    :after dired
    ;; Hide dotfiles
    :config
    (setq dired-omit-files (concat dired-omit-files "\\|^\\..+$")))

  (use-package dired-subtree
    :after dired
    :general
    (:states '(emacs) :keymaps '(dired-mode-map)
      "TAB" 'dired-subtree-toggle
      "<backtab>" 'dired-subtree-cycle
      "z" 'dired-subtree-toggle))
#+end_src

** eshell

#+begin_src emacs-lisp
  (use-package eshell
    :commands (eshell
               amd/eshell-or-project-eshell
               projectile-run-eshell)
    :custom
    (eshell-banner-message
     '(format "%s %s\n"
              (propertize (format " %s " (string-trim (buffer-name)))
                          'face 'mode-line-highlight)
              (propertize (current-time-string)
                          'face 'font-lock-keyword-face)))
    :init
    (defun amd/move-modeline-to-header ()
      (interactive)
      (setq header-line-format mode-line-format)
      (hide-mode-line-mode))
    ;; (add-hook 'eshell-mode-hook #'amd/move-modeline-to-header)

    (defun eshell-set-keys ()
      (interactive)
      (general-define-key
       :keymaps '(eshell-mode-map)
       :states '(normal insert)
       "C-l"  'eshell/clear-buffer
       "M-e" 'tmux-window-navigation/move-up
       "M-n" 'tmux-window-navigation/move-down)
      (general-define-key
       :keymaps '(eshell-mode-map)
       :states '(insert)
       ;; Use ivy for tab completion
       ;; "<tab>" (lambda () (interactive) (pcomplete-std-complete))
       ;; "C-e"  'eshell-previous-prompt
       ;; "C-n"  'eshell-next-prompt
       "<down>" 'eshell-next-matching-input-from-input
       "<up>" 'eshell-previous-matching-input-from-input)
      (general-define-key
       :keymaps '(eshell-mode-map)
       :states '(normal)
       "E"  'eshell-previous-prompt
       "N"  'eshell-next-prompt
       "G" 'amd/eshell-goto-prompt
       "o" 'amd/eshell-goto-prompt))
    (add-hook 'eshell-first-time-mode-hook 'eshell-set-keys)

    ;; ;; Use ivy for tab completion
    ;; (add-hook 'eshell-mode-hook
    ;;           (lambda ()
    ;;             (define-key eshell-mode-map (kbd "<tab>")
    ;;               (lambda () (interactive) (pcomplete-std-complete)))))

    ;; C-M-i -> complete-symbol (used for elisp inside eshell)
    ;; See completion-at-point-functions for more info

    ;; Tab complete using fish
    ;; Sources:
    ;;   https://github.com/Ambrevar/dotfiles/blob/master/.emacs.d/lisp/init-eshell.el
    ;;   https://www.reddit.com/r/emacs/comments/6y3q4k/yes_eshell_is_my_main_shell/

    ;; (when (executable-find "fish")
    ;;   (setq eshell-default-completion-function 'eshell-fish-completion))

    (defun amd/eshell-or-project-eshell ()
      "Launch projectile-run-eshell else eshell."
      (interactive)
      (if (eq major-mode 'eshell-mode)
          (delete-window)
        (if (projectile-project-root)
            (projectile-run-eshell nil)
          (eshell))))

    (defun amd/eshell-goto-prompt ()
      "Goto end of the last line of the buffer and enter insert mode."
      (interactive)
      (evil-goto-line)
      (evil-end-of-line)
      (evil-append-line nil))

    (defun eshell-fish-completion ()
      (while (pcomplete-here
              (let ((comp-list
                     (let* ((raw-prompt (buffer-substring-no-properties (save-excursion (eshell-bol) (point)) (point)))
                            ;; Keep spaces at the end with OMIT-NULLS=nil in `split-string'.
                            (toks (split-string raw-prompt split-string-default-separators nil))
                            ;; The first non-empty `car' is the command. Discard
                            ;; leading empty strings.
                            (tokens (progn (while (string= (car toks) "")
                                             (setq toks (cdr toks)))
                                           toks))
                            ;; Fish does not support subcommand completion. We make
                            ;; a special case of 'sudo' and 'env' since they are
                            ;; the most common cases involving subcommands.  See
                            ;; https://github.com/fish-shell/fish-shell/issues/4093.
                            (prompt (if (not (member (car tokens) '("sudo" "env")))
                                        raw-prompt
                                      (setq tokens (cdr tokens))
                                      (while (and tokens
                                                  (or (string-match "^-.*" (car tokens))
                                                      (string-match "=" (car tokens))))
                                        ;; Skip env/sudo parameters, like LC_ALL=C.
                                        (setq tokens (cdr tokens)))
                                      (mapconcat 'identity tokens " "))))
                       ;; Completion result can be a filename.  pcomplete expects
                       ;; cannonical file names (i.e. withou '~') while fish preserves
                       ;; non-cannonical results.  If the result contains a directory,
                       ;; expand it.
                       (mapcar (lambda (e) (car (split-string e "\t")))
                               (split-string
                                (with-output-to-string
                                  (with-current-buffer standard-output
                                    (call-process "fish" nil t nil "-c" (format "complete -C'%s'" prompt))))
                                "\n" t)))))
                (if (and comp-list (file-name-directory (car comp-list)))
                    (pcomplete-dirs-or-entries)
                  comp-list)))))

    (setq eshell-history-size 8192)
    (setq eshell-hist-ignoredups t)
    (setq eshell-cmpl-ignore-case t)

    (setq eshell-buffer-maximum-lines 2048)
    (add-hook 'eshell-output-filter-functions 'eshell-truncate-buffer)
    (add-hook 'eshell-output-filter-functions 'eshell-handle-ansi-color)

    (setq eshell-kill-on-exit t)
    (setq eshell-cd-on-directory t
          eshell-dirtrack-verbose t
          eshell-list-files-after-cd nil
          eshell-pushd-tohome t
          eshell-pushd-dunique t
          eshell-buffer-shorthand t)

    ;; (setq eshell-scroll-to-bottom-on-input t)

    ;; Plan 9 style shell
    ;; Still requires running eshell-smart-initialize in ~/.emacs.d/eshell/login
    ;; (require 'em-smart)
    ;; (setq eshell-where-to-jump 'begin)
    ;; (setq eshell-review-quick-commands t)
    ;; (setq eshell-smart-space-goes-to-end t)

    ;; Disable Company mode
    (add-hook 'eshell-mode-hook (lambda () (company-mode -1)))
    (add-hook 'eshell-mode-hook (lambda () (undo-tree-mode -1)))

    ;; Visual commands
    (with-eval-after-load 'em-term
      (nconc eshell-visual-commands
             '("sudo" "gcert" "ssh" "tail"
               "alsamixer" "htop" "mpv" "mutt"
               "ranger" "watch" "wifi-menu"))
      (setq eshell-visual-subcommands
            '(("git" "log" "l" "diff")
              ("sudo" "wifi-menu")
              ("sudo" "vim"))))

    (setenv "PAGER" "cat")

    (defalias 'eshell/q 'eshell/exit)
    (defalias 'eshell/x 'eshell/exit)
    (defalias 'eshell/e 'find-file-other-window)
    (defalias 'eshell/emacs 'find-file)
    (defalias 'eshell/d 'counsel-esh-directory-history)
    (defalias 'eshell/h 'counsel-esh-history)

    (with-eval-after-load 'em-prompt
      (defun eshell-next-prompt (n)
        "Move to end of Nth next prompt in the buffer.
  See `eshell-prompt-regexp'."
        (interactive "p")
        (re-search-forward eshell-prompt-regexp nil t n)
        (when eshell-highlight-prompt
          (while (not (get-text-property (line-beginning-position) 'read-only) )
            (re-search-forward eshell-prompt-regexp nil t n)))
        (eshell-skip-prompt))

      (defun eshell-previous-prompt (n)
        "Move to end of Nth previous prompt in the buffer.
  See `eshell-prompt-regexp'."
        (interactive "p")
        (backward-char)
        (eshell-next-prompt (- n))))

    ;; adapted from doom-emacs eshell
    ;; https://github.com/hlissner/doom-emacs/blob/develop/modules/term/eshell/autoload/eshell.el#L289
    (defun amd/eshell-cleanup ()
      "Close window on quit."
      (let ((buf (current-buffer)))
        (when-let (win (get-buffer-window buf))
          (let ((ignore-window-parameters t)
                (popup-p (window-dedicated-p win)))
            (delete-window win)
            (when popup-p
              (cl-loop for win in (window-list)
                       for buf = (window-buffer win)
                       for mode = (buffer-local-value 'major-mode buf)
                       if (eq mode 'eshell-mode)
                       return (select-window win)))))))
    (add-hook 'eshell-exit-hook #'amd/eshell-cleanup)

    (defun eshell-enable-256-colors ()
      (interactive)
      (require 'xterm-color)
      ;; (add-hook 'eshell-mode-hook (lambda ()
      (setq xterm-color-preserve-properties t)
      ;; ))

      (add-to-list 'eshell-preoutput-filter-functions 'xterm-color-filter)
      (setq eshell-output-filter-functions
            (remove 'eshell-handle-ansi-color eshell-output-filter-functions)))

    ;; (require 'xterm-color)
    ;; (progn (add-hook 'comint-preoutput-filter-functions 'xterm-color-filter)
    ;;        (setq comint-output-filter-functions (remove 'ansi-color-process-output comint-output-filter-functions))
    ;;        (setq font-lock-unfontify-region-function 'xterm-color-unfontify-region))

    (defun counsel-esh-directory-history ()
      "Browse Eshell history."
      (interactive)
      (require 'em-dirs)
      (ivy-read
       "Directory History: "
       (cl-loop for index from 0 for dir in (ring-elements eshell-last-dir-ring)
                collect
                (cons
                 (format "%-10s %-30s"
                         (propertize (format "cd -%d" index) 'face 'font-lock-builtin-face)
                         dir)
                 (format "-%d" index)))
       :action
       (lambda (arg)
         (eshell/cd (cdr arg))
         (when (featurep 'em-smart)
           (eshell-smart-goto-end)))))

    ;; (defun amd/add-icon-to-eshell-ls (old-function &rest arguments)
    ;;   (let* ((file (car arguments))
    ;;          (decorated-file (apply old-function arguments))
    ;;          (is-directory (string= "d" (substring (nth 9 file) 0 1)))
    ;;          (file-icon
    ;;           (if is-directory
    ;;               (cond
    ;;                ((file-symlink-p decorated-file)
    ;;                 (all-the-icons-octicon "file-symlink-directory" :height 1.2))
    ;;                ((all-the-icons-dir-is-submodule decorated-file)
    ;;                 (all-the-icons-octicon "file-submodule"))
    ;;                ((file-exists-p (format "%s/.git" decorated-file))
    ;;                 (all-the-icons-octicon "repo"))
    ;;                (t (all-the-icons-octicon "file-directory")))
    ;;             (all-the-icons-icon-for-file decorated-file)))
    ;;          )
    ;;     (message "%s" decorated-file)
    ;;     (concat file-icon " " decorated-file)
    ;;     ;; decorated-file
    ;;     )
    ;;   )
    ;; (advice-add 'eshell-ls-decorated-name :around #'amd/add-icon-to-eshell-ls)

    (defun eshell/clear-buffer ()
      "Clear all text in the eshell buffer."
      (interactive)
      (save-excursion
        (goto-char eshell-last-output-end)
        (let ((lines (count-lines 1 (point)))
              (inhibit-read-only t))
          (beginning-of-line)
          (let ((pos (point)))
            (delete-region (point-min) (point)))))
      (end-of-buffer)))
#+end_src

** shell

#+begin_src emacs-lisp
  (use-package shell
    :general
    (:states '(normal)
     :keymaps '(shell-mode-map)
      "C-d"  'evil-scroll-down)
    (:states '(normal insert)
     :keymaps '(shell-mode-map)
      "C-e"  'comint-previous-prompt
      "C-n"  'comint-next-prompt
      "C-l"  'comint-clear-buffer
      "M-e" 'tmux-window-navigation/move-up
      "M-n" 'tmux-window-navigation/move-down)
    (:states '(insert)
     :keymaps '(shell-mode-map)
      "<down>" 'comint-next-matching-input-from-input
      "<up>" 'comint-previous-matching-input-from-input
      "<tab>" (lambda () (interactive) (pcomplete-std-complete)))

    :init
    (setq term-buffer-maximum-size 2048)
    (setq comint-buffer-maximum-size 2048)
    (add-hook 'comint-output-filter-functions 'comint-truncate-buffer)
    (when (executable-find "fish")
      (setq explicit-shell-file-name (executable-find "fish"))))
#+end_src

** ansi-color

#+begin_src emacs-lisp
  (use-package ansi-color
   :custom
   (ansi-color-for-comint-mode 'filter))
#+end_src

** compilation

#+begin_src emacs-lisp
  (use-package compile
    :init
    (setq compilation-scroll-output 'first-error)
    (setq compilation-skip-threshold 2)
    (setq compilation-auto-jump-to-first-error nil)
    :general
    (:states '(motion)
     :keymaps '(compilation-mode-map)
     "M-n" 'tmux-window-navigation/move-down
     "gg" 'evil-goto-first-line
     "G" 'evil-goto-line)

    ;; ;; this is not working
    ;; (setq compilation-finish-functions 'amd/compile-autoclose)
    ;; (defun amd/compile-autoclose (buffer string)
    ;;   (cond ((string-match "finished" string)
    ;;          ;; (bury-buffer "*compilation*")
    ;;          ;; (winner-undo)
    ;;          (delete-window (get-buffer-window "*compilation**"))
    ;;          (message "Build successful."))
    ;;         (t
    ;;          (message "Compilation exited abnormally: %s" string))))

    :init
    ;; TODO: Figure out how to truncate line by default in compilation mode
    ;; (add-hook 'compilation-start-hook (lambda () (toggle-truncate-lines 1)))
    :config
    (defun amd/split-compilation ()
      "Open/close the *compilation* buffer."
      (interactive)
      (if (string-equal (buffer-name) "*compilation*")
          (delete-window)
        (pop-to-buffer "*compilation*")))

    (setq compilation-finish-function
          (lambda (buf str)
            (if (null (string-match ".*exited abnormally.*" str))
                ;;no errors, make the compilation window go away in a few seconds
                (progn
                  (run-at-time
                   "2 sec" nil 'delete-windows-on
                   (get-buffer-create "*compilation*"))
                  (message "No Compilation Errors!")))))

    ;; From http://endlessparentheses.com/ansi-colors-in-the-compilation-buffer-output.html
    ;; (require 'ansi-color)
    (defun endless/colorize-compilation ()
      "Colorize from `compilation-filter-start' to `point'."
      (let ((inhibit-read-only t))
        (ansi-color-apply-on-region
         compilation-filter-start (point))))
    (add-hook 'compilation-filter-hook #'endless/colorize-compilation))
#+end_src

** calc

#+begin_src emacs-lisp
  (use-package calc
    :after (hydra)
    :general
    (:states
     '(emacs)
     :keymaps '(calc-mode-map)
     "C-c h" 'hydra-calc-cs/body
     "<prior>" 'amd/calc-roll-entire-stack-up
     "<next>" 'amd/calc-roll-entire-stack-down
     "ru" 'amd/calc-roll-entire-stack-up
     "rd" 'amd/calc-roll-entire-stack-down)

    :config
    (defun amd/calc-roll-entire-stack-down ()
      (interactive)
      (calc-roll-down-stack (calc-stack-size))
      (calc-refresh))

    (defun amd/calc-roll-entire-stack-up ()
      (interactive)
      (calc-roll-up-stack (calc-stack-size))
      (calc-refresh))

    (defhydra hydra-calc-cs (:color blue :hint nil)
      "
  ^Display^            ^Binary Ops^         ^Units^
  ^^^^^^^^-----------------------------------------------
  _R_: change radix    _a_: and             _c_: convert
  _z_: leading zeros   _o_: or              ^ ^
  ^ ^                  _x_: xor             ^ ^
  ^ ^                  _n_: not             ^ ^
  ^ ^                  _d_: diff            ^ ^
  ^ ^                  _r_: right shift     ^ ^
  ^ ^                  _l_: left shift      ^ ^
      "
      ("R" calc-radix)
      ("z" calc-leading-zeros)
      ("a" calc-and)
      ("o" calc-or)
      ("x" calc-xor)
      ("n" calc-not)
      ("d" calc-diff)
      ("r" calc-rshift-binary)
      ("l" calc-lshift-binary)
      ("c" calc-convert-units))

    ;; (setq math-additional-units
    ;;       '((bit    nil           "Bit")
    ;;         (byte   "8 * bit"     "Byte")
    ;;         (bps    "bit / s"     "Bit per second"))
    ;;       math-units-table nil)

    (defun calcFunc-dateDiffToHMS (date1 date2 worktime-per-day)
      "Calculate the difference of DATE1 and DATE2 in HMS form.
      Each day counts with WORKTIME-PER-DAY hours."
      (cl-labels ((dateTrunc (date)
                             (calcFunc-date (calcFunc-year date)
                                            (calcFunc-month date)
                                            (calcFunc-day date)))
                  (datep (date)
                         (and (listp date)
                              (eq (car date) 'date))))
        (if (and (datep date1)
                 (datep date2))
            (let* ((business-days (calcFunc-bsub
                                   (dateTrunc date1)
                                   (dateTrunc date2))))
              (calcFunc-add
               (calcFunc-hms (calcFunc-mul business-days worktime-per-day) 0 0)
               (calcFunc-sub (calcFunc-time date1) (calcFunc-time date2))))
          0))))
#+end_src

** winner - window layout undo/redo

#+begin_src emacs-lisp
  (use-package winner
    :config
    (winner-mode 1))
#+end_src

** eww

[[info:eww#Top][info:eww#Top]]

#+begin_src emacs-lisp
  (use-package eww
    :after evil
    :commands (eww)
    :init
    (when (eq system-type 'gnu/linux)
           (setq browse-url-browser-function 'browse-url-generic
                 browse-url-generic-program "xdg-open")
           (when amd/using-android
             (setq browse-url-generic-program "termux-open-url")))

    (setq eww-search-prefix "http://www.google.com/search?q=")

    :general
    (:states '(motion)
     :keymaps '(eww-mode-map)
      "H" 'eww-back-url
      "L" 'eww-forward-url
      "b" 'eww-list-bookmarks)
    (:states '(motion)
     :keymaps '(eww-bookmark-mode-map)
      "RET" 'eww-bookmark-browse)
    :config
    (add-to-list 'evil-motion-state-modes 'eww-bookmark-mode))
#+end_src

* vterm

#+begin_src emacs-lisp
  (use-package vterm
    :commands (vterm)
    :general
    (:states '(emacs)
     :keymaps '(vterm-mode-map)
     (kbd "<f9>") 'amd/take-svg-screenshot)
    (:states '(normal)
     :keymaps '(vterm-mode-map)
     "C-p" 'vterm--self-insert
     (kbd "<f9>") 'amd/take-svg-screenshot
     "u" 'vterm-undo)
    (:states '(insert)
     :keymaps '(vterm-mode-map)
     "C-p" 'vterm--self-insert
     (kbd "<f9>") 'amd/take-svg-screenshot
     "C-a" 'vterm-send-C-a
     "C-e" 'vterm-send-C-e
     "C-d" 'vterm-send-C-d
     "C-y" 'vterm-yank))
#+end_src

* nov.el

#+begin_src emacs-lisp
  (use-package nov
    :general
    (:states '(motion)
     :keymaps '(nov-mode-map)
     "g r" 'nov-render-document
     "C-n" 'nov-next-document
     "C-p" 'nov-previous-document
     "T" 'nov-goto-toc
     "C-d" 'nov-scroll-up
     "C-u" 'nov-scroll-down
     "d" 'nov-scroll-up
     "u" 'nov-scroll-down
     "RET" 'nov-browse-url
     "f" 'ace-link-nov)

    :config
    (add-to-list 'evil-motion-state-modes 'nov-mode)
    :init
    (setq nov-text-width nil
          nov-variable-pitch t)

    (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))

    (defun amd/nov-font-setup ()
      (interactive)
      (face-remap-add-relative
       'variable-pitch
       ;; :family "Liberation Serif"
       ;; :family "Roboto Medium"
       ;; :family "Noto Serif Light"
       :family "Dejavu Serif Condensed"
       :height 1.0))
    (add-hook 'nov-mode-hook 'amd/nov-font-setup)

    (defun ace-link-nov ()
      "Open a visible link in an `nov-mode' buffer."
      (interactive)
      (let ((pt (avy-with ace-link-eww
                  (avy--process
                   (mapcar #'cdr (ace-link--eww-collect))
                   (avy--style-fn avy-style)))))
        (ace-link--nov-action pt)))

    (defun ace-link--nov-action (pt)
      (when (number-or-marker-p pt)
        (goto-char (1+ pt))
        (nov-browse-url))))
#+end_src

* elfeed

#+begin_src emacs-lisp
  (use-package elfeed
    :general
    (:states '(motion)
     :keymaps '(elfeed-search-mode-map)
     "RET" 'elfeed-search-show-entry
     )
    (:states '(motion)
     :keymaps '(elfeed-show-mode-map)
     "TAB" 'shr-next-link
     "<backtab>" 'shr-previous-link
     )

    :config
    (add-to-list 'evil-motion-state-modes 'elfeed-search-mode)
    (add-to-list 'evil-motion-state-modes 'elfeed-show-mode)
  )
#+end_src

* company auto-completion

#+begin_src emacs-lisp
  (use-package pos-tip)

  (if window-system
      ;; doesn't work on the console and overwrites M-h keybinding
      (use-package company-quickhelp
        :init
        (set-face-attribute 'tooltip nil :background "#303030" :foreground "#c6c6c6")
        :after pos-tip
        :config
        (company-quickhelp-mode 1)))

  (use-package company
    :diminish
    :init
    (setq company-idle-delay 0.2)
    (setq company-minimum-prefix-length 1)
    (setq company-show-numbers t)
    (setq company-tooltip-limit 20)
    (setq company-dabbrev-downcase nil)
    (setq company-dabbrev-ignore-case nil)

    ;; (set-face-attribute 'company-tooltip nil :background "black" :foreground "gray40")
    ;; (set-face-attribute 'company-tooltip-selection nil :inherit 'company-tooltip :background "gray15")
    ;; (set-face-attribute 'company-preview nil :background "black")
    ;; (set-face-attribute 'company-preview-common nil :inherit 'company-preview :foreground "gray40")
    ;; (set-face-attribute 'company-scrollbar-bg nil :inherit 'company-tooltip :background "gray20")
    ;; (set-face-attribute 'company-scrollbar-fg nil :background "gray40")

    (setq company-backends
          '((company-files
             company-keywords
             company-capf)
            (company-abbrev company-dabbrev)))

    :general
    (:states '(insert)
      "C-x C-f" 'company-files)
    :config
    (global-company-mode t)
    ;; (add-hook 'after-init-hook 'global-company-mode)
    ;; (add-hook 'eshell-mode-hook
    ;;           (lambda ()
    ;;             (add-to-list (make-local-variable 'company-backends)
    ;;                          'company-elisp)))

    ;; Abort company-mode when exiting insert mode
    (defun abort-company-on-insert-state-exit ()
      (company-abort))

    (add-hook 'evil-insert-state-exit-hook 'abort-company-on-insert-state-exit))

  ;; (use-package company-shell
  ;;   :after company
  ;;   :init
  ;;   (setq company-shell-modes '(eshell-mode))
  ;;   :config
  ;;   (add-to-list 'company-backends 'company-shell))
#+end_src

* which-key

#+begin_src emacs-lisp
  (use-package which-key
    :demand
    :diminish
    :custom
    (which-key-separator " → ") ;; »
    (which-key-ellipsis "") ;; "…"
    (which-key-idle-delay 0.5)
    (which-key-popup-type 'side-window)
    (which-key-side-window-location 'bottom)
    (which-key-echo-keystrokes 0.2)
    (which-key-show-prefix 'echo)
    :config
    (which-key-mode 1))
#+end_src

* snippets (yasnippet yankpad)

#+begin_src emacs-lisp
  (use-package yasnippet
    :diminish yas-minor-mode
    :config
    ;; seems to be needed for yankpad
    (yas-global-mode))

  (use-package yankpad
    :commands (yankpad-edit yankpad-set-category yankpad-expand yankpad-insert)
    :after yasnippet
    :custom
    (yankpad-file "~/.emacs.d/yankpad.org")
    :general
    (:states '(insert)
      "C-t" 'yankpad-expand))
#+end_src

* wgrep

#+begin_src emacs-lisp
  (use-package wgrep)

  (use-package wgrep-pt
    :config
    (autoload 'wgrep-pt-setup "wgrep-pt")
    ;; not necessary, C-x C-q invokes ivy-wgrep-change-to-wgrep-mode
    ;; (add-hook 'ivy-occur-grep-mode-hook 'wgrep-pt-setup)
    (add-hook 'pt-search-mode-hook 'wgrep-pt-setup))

  (use-package wgrep-ag
    :config
    (autoload 'wgrep-ag-setup "wgrep-ag")
    (add-hook 'ag-search-mode-hook 'wgrep-ag-setup))
#+end_src

* magit - version-control

#+begin_src emacs-lisp
  (use-package magit
    :defer t
    :custom
    (magit-section-initial-visibility-alist
     '((stashes . hide) (untracked . hide) (unpushed . show)))
    (magit-diff-expansion-threshold 10.0)
    (magit-commit-show-diff nil)
    :init
    (setq git-commit-fill-column 70)
    :general
    ;; (:keymaps '(magit-popup-mode-map)
    ;;  amd/leader-key 'amd/quit-magit-and-leader)
    (:keymaps '(magit-log-mode-map
                magit-diff-mode-map
                magit-process-mode-map
                magit-status-mode-map)
     "C-d" 'evil-scroll-down
     "C-u" 'evil-scroll-up
     "C-p" 'counsel-git
     "e" 'magit-section-backward
     "p" nil) ;; hit E for ediff popup instead

    :config
    ;; (evil-define-minor-mode-key 'emacs 'magit-popup-mode [escape] 'magit-popup-quit)

    ;; (defun amd/quit-magit-and-leader ()
    ;;   "Quit Magit Popup and display leader menu."
    ;;   (interactive)
    ;;   (magit-popup-quit)
    ;;   (hydra-leader-menu/body))

    (defun amd/magit-instant-commit ()
      (interactive)
      (magit-commit (list "-a" "-m" "instant-update"))
      (magit-push-current-to-upstream)))
#+end_src

** transient

- Replacement for magit-popup
- For user options see [[info:transient#Other%20Options][info:transient#Other Options]] or
  https://magit.vc/manual/transient/Other-Options.html#Other-Options

#+begin_src emacs-lisp
  (use-package transient
    :init
    (setq transient-display-buffer-action
          '(display-buffer-below-selected))
    :config
    (transient-bind-q-to-quit))
#+end_src

** ediff

#+begin_src emacs-lisp
  (use-package ediff
    :init
    (setq ediff-split-window-function 'split-window-horizontally))
#+end_src

* spell checking

#+begin_src emacs-lisp
  (use-package flyspell
    :diminish
    :commands (flyspell-mode)
    :init
    (setq flyspell-use-meta-tab nil)
    (setq flyspell-auto-correct-binding (kbd "C-M-;"))
    (setq ispell-program-name
          (or (executable-find "aspell")
              (executable-find "hunspell")))
    :general
    (:keymaps '(flyspell-mode-map)
     [(control ?\,)] nil
     [(control ?\;)] nil
     "C-." nil
     "C-M-i" nil ;; This conflicts with pcomplete
     "C-M-;" nil
     "C-;" nil)
    (:states '(insert)
     :keymaps '(flyspell-mode-map)
     "C-x C-s" 'flyspell-check-previous-highlighted-word
     "C-M-;" 'flyspell-correct-previous-word-generic
     "C-;" 'flyspell-auto-correct-previous-word))

  (use-package flyspell-correct-ivy
    :after flyspell
  )
  ;; (define-key ctl-x-map "\C-s"
  ;;   #'endless/ispell-word-then-abbrev)

  ;; (defun endless/simple-get-word ()
  ;;   (car-safe (save-excursion (ispell-get-word nil))))

  ;; (defun endless/ispell-word-then-abbrev (p)
  ;;   "Call `ispell-word', then create an abbrev for it.
  ;;   With prefix P, create local abbrev. Otherwise it will
  ;;   be global.
  ;;   If there's nothing wrong with the word at point, keep
  ;;   looking for a typo until the beginning of buffer. You can
  ;;   skip typos you don't want to fix with `SPC', and you can
  ;;   abort completely with `C-g'."
  ;;   (interactive "P")
  ;;   (let (bef aft)
  ;;     (save-excursion
  ;;       (while (if (setq bef (endless/simple-get-word))
  ;;                  ;; Word was corrected or used quit.
  ;;                  (if (ispell-word nil 'quiet)
  ;;                      nil ; End the loop.
  ;;                    ;; Also end if we reach `bob'.
  ;;                    (not (bobp)))
  ;;                ;; If there's no word at point, keep looking
  ;;                ;; until `bob'.
  ;;                (not (bobp)))
  ;;         (backward-word)
  ;;         (backward-char))
  ;;       (setq aft (endless/simple-get-word)))
  ;;     ;; (if (and aft bef (not (equal aft bef)))
  ;;     ;;     (let ((aft (downcase aft))
  ;;     ;;           (bef (downcase bef)))
  ;;     ;;       (define-abbrev
  ;;     ;;         (if p local-abbrev-table global-abbrev-table)
  ;;     ;;         bef aft)
  ;;     ;;       (message "\"%s\" now expands to \"%s\" %sally"
  ;;     ;;                bef aft (if p "loc" "glob")))
  ;;     ;;   (user-error "No typo at or before point"))
  ;;     ))

  ;; (setq save-abbrevs 'silently)
  ;; (setq-default abbrev-mode t)
#+end_src

* navigation

** avy

#+begin_src emacs-lisp
  (use-package avy
    :commands (avy-goto-char avy-goto-word-0 avy-goto-line)
    :config
    (setq avy-keys '(?t ?n ?s ?e ?d ?h ?r ?i ?a ?o ?b ?k ?g ?v ?f ?p ?l ?u ?m))
    (setq avy-background t)
    :general
    (:states '(normal)
      "g ." #'avy-goto-char
      "t"   #'avy-goto-char-timer
      "T"   #'avy-goto-word-0))
#+end_src

** undo-tree

#+begin_src emacs-lisp
  (use-package undo-tree
    :diminish
    :demand
    ;; :commands (undo-tree-visualize)
    :custom
    (undo-tree-auto-save-history nil)
    (undo-tree-history-directory-alist
     '(("." . "~/.emacs.d/undo-tree-history")))
    :init
    (setq undo-tree-visualizer-timestamps t
          undo-tree-visualizer-diff t)
    :general
    (:states '(motion) :keymaps '(undo-tree-visualizer-mode-map)
      "n" 'undo-tree-visualize-redo
      "e" 'undo-tree-visualize-undo
      "h" 'undo-tree-visualize-switch-branch-left
      "l" 'undo-tree-visualize-switch-branch-right)
    :config
    (global-undo-tree-mode))
#+end_src

** tab-bar-mode

#+begin_src emacs-lisp
  (use-package tab-bar
    :if (>= emacs-major-version 27)
    :config
    (defun amd/tab-bar-tab-name-current ()
      "Generate tab name from the buffer of the selected window."
      (format " %s " (buffer-name (window-buffer (minibuffer-selected-window)))))
    (setq tab-bar-tab-name-function #'amd/tab-bar-tab-name-current)

    (defun amd/tab-bar-next-or-new-tab (&optional arg)
      "Switch to next tab or make a new one."
      (interactive "p")
      (unless (integerp arg)
        (setq arg 1))
      (let* ((tabs (funcall tab-bar-tabs-function))
             (from-index (or (tab-bar--current-tab-index tabs) 0))
             (to-index (mod (+ from-index arg) (length tabs))))
        (if (= 0 to-index)
            (tab-bar-new-tab)
          (tab-bar-select-tab (1+ to-index)))))

    (defhydra hydra-tab-bar (:color red :columns 3)
      ("h"  tab-previous                "← prev")
      ("l"  amd/tab-bar-next-or-new-tab "→ next/new")
      ("N"  tab-bar-new-tab             "new")

      ("H" (lambda() (interactive)
             (tab-bar-move-tab -1)) "← move")
      ("L"  tab-bar-move-tab        "→ move")
      ("c"  tab-bar-close-tab       "close")

      ("."  tab-bar-switch-to-tab  "switch" :color blue)
      ("r"  tab-rename             "rename")
      ("RET" keyboard-escape-quit  "quit" :exit t)))
#+end_src

** eyebrowse - tabs

#+begin_src emacs-lisp
  (use-package eyebrowse
    :after (desktop hydra)
    :init
    (defun amd/eyebrowse-next-or-new-window-config ()
      (interactive)
      (let* ((window-configs (eyebrowse--get 'window-configs))
             (match (assq (eyebrowse--get 'current-slot) window-configs))
             (index (-elem-index match window-configs)))
        (if index
            (if (< (1+ index) (length window-configs))
                (eyebrowse-switch-to-window-config
                 (car (nth (1+ index) window-configs)))
              (eyebrowse-create-window-config))
          (eyebrowse-create-window-config))))

    (setq eyebrowse-mode-line-style 'smart)
    (setq eyebrowse-mode-line-left-delimiter  "⌈"
          eyebrowse-mode-line-right-delimiter "⌉"
          eyebrowse-mode-line-separator       "⌉ ⌈")
    ;; (setq eyebrowse-mode-line-left-delimiter  "|"
    ;;       eyebrowse-mode-line-right-delimiter "|"
    ;;       eyebrowse-mode-line-separator       "| |")

    :config
    (defhydra hydra-eyebrowse (:color red :columns 3)
      "
    %s(eyebrowse-mode-line-indicator)
    -----------------------------------------
    _0_-_9_: switch to tab 0-9"
      ("h"  eyebrowse-prev-window-config            "← prev")
      ("c"  eyebrowse-close-window-config           "close")
      ("."  eyebrowse-switch-to-window-config       "switch" :color blue)
      ("l"  amd/eyebrowse-next-or-new-window-config "→ next/new")
      ("r"  eyebrowse-rename-window-config          "rename")
      ("RET" keyboard-escape-quit                   "quit" :exit t)
      ("0" eyebrowse-switch-to-window-config-0 nil)
      ("1" eyebrowse-switch-to-window-config-1 nil)
      ("2" eyebrowse-switch-to-window-config-2 nil)
      ("3" eyebrowse-switch-to-window-config-3 nil)
      ("4" eyebrowse-switch-to-window-config-4 nil)
      ("5" eyebrowse-switch-to-window-config-5 nil)
      ("6" eyebrowse-switch-to-window-config-6 nil)
      ("7" eyebrowse-switch-to-window-config-7 nil)
      ("8" eyebrowse-switch-to-window-config-8 nil)
      ("9" eyebrowse-switch-to-window-config-9 nil))
    (eyebrowse-mode t))
#+end_src

** ace-window

#+begin_src emacs-lisp
  (use-package ace-window
    :commands (ace-window)
    :after (hydra)
    :init
    (setq aw-keys   '(?n ?e ?i ?l ?u ?y)
          aw-dispatch-always t
          aw-swap-invert t
          aw-dispatch-alist
          '((?c aw-delete-window     "Ace - Delete Window")
            (?r aw-swap-window       "Ace - Swap Window")
            (?s aw-split-window-vert "Ace - Split Vert Window")
            (?v aw-split-window-horz "Ace - Split Horz Window")
            (?o delete-other-windows "Ace - Maximize Window")
            (?p aw-flip-window)
            ;; (?u winner-undo)
            ;; (?r winner-redo)
            (?= balance-windows)))
    :config
    ;; (setq aw-keys '(?t ?n ?s ?e ?d ?h ?r ?i ?a ?o ?b ?k ?g ?j ?v ?m ?p ?l))
    ;; show the window letter in the modeline
    ;; (set-face-attribute 'aw-mode-line-face nil :inherit 'mode-line-buffer-id :foreground "lawn green")
    ;; (ace-window-display-mode t)
    (set-face-attribute 'aw-leading-char-face nil :foreground "deep sky blue" :weight 'bold :height 3.0)
    ;; :background "#303030"

    (when (fboundp 'defhydra)
      (defhydra hydra-window-size (:color red)
        "Windows size"
        ("w" evil-window-set-height "maximize")
        ("h" shrink-window-horizontally "shrink horizontal")
        ("n" shrink-window "shrink vertical")
        ("e" enlarge-window "enlarge vertical")
        ("l" enlarge-window-horizontally "enlarge horizontal"))

      (defhydra hydra-window-frame (:color blue)
        "Frame"
        ("m" toggle-frame-maximized "toggle maximize-window")
        ("f" toggle-frame-fullscreen "toggle fullscreen")
        ("n" make-frame "new frame")
        ("c" delete-frame "delete frame"))

      (add-to-list 'aw-dispatch-alist '(?w hydra-window-size/body) t)
      (add-to-list 'aw-dispatch-alist '(?f hydra-window-frame/body) t)))
#+end_src

** ace-link

#+begin_src emacs-lisp
  (use-package ace-link
    :commands (ace-link-nov ace-link--eww-collect info Info-mode Custom-mode)
    :general
    (:states '(motion) :keymaps '(help-mode-map helpful-mode-map)
      "f"   'ace-link-help
      "TAB" 'help-go-forward
      "C-o" 'help-go-back)
    (:states '(motion) :keymaps '(Info-mode-map)
      amd/leader-key 'hydra-leader-menu/body
      "M-n" 'tmux-window-navigation/move-down ;; was clone-buffer
      "f"   'ace-link-info
      "gg"  'evil-goto-first-line
      "TAB" 'Info-history-forward
      "C-o" 'Info-history-back
      "RET" 'Info-follow-nearest-node
      "w"   'evil-forward-word-begin
      "b"   'evil-backword-word-begin
      "n"   'evil-next-line
      "e"   'evil-previous-line
      "q"   'Info-exit)
    (:states '(motion) :keymaps '(compilation-mode-map)
      "f" 'ace-link-compilation)
    (:states '(motion) :keymaps '(woman-mode-map)
      "f" 'ace-link-woman)
    (:states '(motion) :keymaps '(eww-mode-map)
      "f" 'ace-link-eww)
    (:states '(normal) :keymaps '(custom-mode-map)
      "f" 'ace-link-custom)
    :init
    :config)
#+end_src

** projectile

#+begin_src emacs-lisp
  (use-package projectile
    :diminish
    :custom
    (projectile-completion-system 'ivy)
    (projectile-require-project-root t)  ;; require .git or similar to mark a project
    (projectile-enable-caching nil)
    (projectile-indexing-method 'alien)
    (projectile-globally-ignored-directories '("vendor/ruby"))
    (projectile-switch-project-action
     ;; 'projectile-dired
     'projectile-find-file)
    :commands (ibuffer
               ivy-switch-project
               projectile-project-root
               projectile-switch-project
               projectile-load-known-projects
               projectile-run-eshell
               projectile-find-file)
    :init
    ;; (defun amd/projectile-switch-project (old-function &rest arguments)
    ;;   (message "%s" old-function)
    ;;   (message "%s" arguments)
    ;;   (apply old-function arguments))
    ;; (advice-add 'projectile-switch-project-by-name :around #'amd/projectile-switch-project)
    :config
    (projectile-global-mode t))
#+end_src

** shackle

#+begin_src emacs-lisp
  (use-package shackle
    :custom
    (help-window-select t) ;; (not shackle) select new help windows when they open
    (shackle-select-reused-windows nil)
    (shackle-default-rule '(:select t))
    (shackle-default-alignment 'below)
    (shackle-default-size 0.5)
    :init
    (setq
     shackle-rules
     '(;; Hidden popups
       ("*Shell Command Output*" :ignore t)
       ("*Async Shell Command*" :ignore t)
       ("*Flycheck error messages*" :ignore t)

       ("\\*[Ii]buffer\\*" :regexp t :same t)
       (compilation-mode :select nil :size 0.3 :align bottom)
       ("*Help*" :size 0.5 :align bottom)
       ("\\*helpful.*\\*" :regexp t :size 0.5 :align bottom)
       ("*Completions*" :size 0.2 :align bottom)
       ('flycheck-error-list-mode :select t :align bottom :size 0.2)
       ('ivy-occur-grep-mode :align bottom :size 0.5)
       ('grep-mode :align bottom :size 0.5)
       ("*Warnings*" :select nil :inhibit-window-quit t :other t)

       ("\\*e?shell.*\\*" :regexp t :popup t :size 0.5 :align bottom)

       ('magit-status-mode :popup t :same t)
       ;; ('magit-log-mode :same t)
       ;; Magit buffers other than status should replace the current buffer.
       ("magit-.*" :same t)
       ;; eww popups should just replace current buffer
       ('eww-bookmark-mode :same t)
       ('eww-history-mode :same t)

       ('dired-mode :other t :align left :size 0.3)

       ('undo-tree-mode :align right :size 0.4)))
    :config
    (shackle-mode))
#+end_src

** ibuffer

#+begin_src emacs-lisp
  (use-package ibuffer
    :custom
    (ibuffer-use-header-line t)
    (ibuffer-truncate-lines t)
    (ibuffer-use-other-window t)
    :init
    (add-hook 'ibuffer-mode-hook (lambda () (hl-line-mode 1)))
    (setq ibuffer-formats
          '((mark
             " " (name 32 32 :left)
             " "
             filename-and-process)
            (mark
             ;; modified
             ;; read-only
             ;; locked
             ;; " " (size 9 -1 :right)
             ;; " " (mode 16 16 :left :elide)
             " "
             filename-and-process
             ;; project-relative-file
             "  --  " name)))
    :general
    (:states '(emacs)
     :keymaps 'ibuffer-mode-map
     "e" 'ibuffer-backward-line
     "/" 'swiper
     "C-/" 'swiper
     ;; "RET" 'ibuffer-visit-buffer-other-window ;; default is "o"
     ;; "a" 'ibuffer-visit-buffer                ;; default is "RET"
     "C-d" 'evil-scroll-down
     "C-u" 'evil-scroll-up)
    :config)

  ;; create a "default" placeholder to build the filter groups
  ;; (setf ibuffer-saved-filter-groups (quote (("default"))))

  ;; ;; replace the PROJECTS directory with whatever you like
  ;; (cl-dolist (dir (directory-files "~/projects/"))
  ;;   (when (not (member dir '("." "..")))
  ;;     (setf (car ibuffer-saved-filter-groups)
  ;;           (append (car ibuffer-saved-filter-groups)
  ;;                   `((,dir
  ;;                      (filename . ,(expand-file-name
  ;;                                    dir "~/projects/"))))))))

  (use-package ibuffer-vc
    :init
    (add-hook 'ibuffer-mode-hook (lambda () (ibuffer-auto-mode 1)))
    (add-hook 'ibuffer-hook
      (lambda ()
        (ibuffer-vc-set-filter-groups-by-vc-root)
        (unless (eq ibuffer-sorting-mode 'filename/process)
          (ibuffer-do-sort-by-filename/process)))))

  ;; (use-package ibuffer-projectile
  ;;   :init
  ;;   (add-hook 'ibuffer-hook
  ;;             (lambda ()
  ;;               (ibuffer-projectile-set-filter-groups)
  ;;               (unless (eq ibuffer-sorting-mode 'alphabetic)
  ;;                 (ibuffer-do-sort-by-alphabetic)))))
#+end_src

** tmux-window-navigation

#+begin_src emacs-lisp
  (use-package tmux-window-navigation
    :load-path "tmux-window-navigation"
    :config
    (global-tmux-window-navigation-mode 1))
#+end_src

** which-func

#+begin_src emacs-lisp
  (use-package which-func
    :disabled
    :config
    (defadvice which-func-ff-hook (after header-line activate)
      (when which-func-mode
        (setq
         ;; mode-line-format (delete (assoc 'which-func-mode mode-line-format) mode-line-format)
         header-line-format which-func-current)))

    (which-function-mode t))
#+end_src

* language major-modes

#+begin_src emacs-lisp
  (use-package prog-mode
    :config
    (when (display-graphic-p)
      ;; (global-prettify-symbols-mode 1)
      (setq
       prettify-symbols-unprettify-at-point t
       prettify-symbols-alist
       '(("lambda" . ?ƛ)
         ("self." . ?ⓢ)
         ;; ("->" . (?\s (Br . Bl) ?))
         ;; ("-->" . (?\s (Br . Bl) ?\s (Br . Bl) ?))
         ;; ("==>" . (?\s (Br . Bl) ?\s (Br . Bl) ?))
         ;; ("=>" . (?\s (Br . Bl) ?))
         ;; ("--" . (?\s (Br . Bl) ?))
         ;; ("!=" . (?\s (Br . Bl) ?))
         ;; ("==" . (?\s (Br . Bl) ?))
         ;; (">=" . (?\s (Br . Bl) ?))
         ;; ("<=" . (?\s (Br . Bl) ?))
         ;; ("~=" . (?\s (Br . Bl) ?))
         ;; ("&&" . (?\s (Br . Bl) ?))
         ;; ("#{" . (?\s (Br . Bl) ?))
         ;; ("ERROR" . (?\s (Br . Bl) ?\s (Br . Bl) ?\s (Br . Bl) ?\s (Br . Bl) ?\s (Br . Bl) ?))
         ;; ("DEBUG" . (?\s (Br . Bl) ?\s (Br . Bl) ?\s (Br . Bl) ?\s (Br . Bl) ?\s (Br . Bl) ?))
         ))))
#+end_src

#+begin_src emacs-lisp
  (use-package treesit-auto
    ;; :demand t
    :disabled
    :config
    (setq treesit-auto-install 'prompt)
    (global-treesit-auto-mode))
#+end_src

#+begin_src emacs-lisp
  ;; (use-package eglot
  ;;   :init
  ;;   (add-hook 'c++-mode-hook 'eglot-ensure))

  (use-package lsp-mode
    :commands lsp
    :custom
    ;; (lsp-restart 'auto-restart)
    (lsp-restart 'interactive)
    (lsp-headerline-breadcrumb-enable nil)
    :general
    (:keymaps '(lsp-mode-map)
     ;; was lsp-signature-next
     "M-n" 'tmux-window-navigation/move-down)
    :init
    (setq lsp-keymap-prefix "s-l")
    (setq lsp-prefer-flymake nil)

    ;; example .dir-locals.el file for clangd:
    ;; ((nil
    ;;   (lsp-clients-clangd-args "--background-index=true" "--compile-commands-dir=~/project-root")
    ;;   (lsp-clients-clangd-executable . "clangd")))

    ;; Run my-local-variables-hook after processing .dir-locals.el
    (defun my-local-variables-hook ()
      (cond
       ((derived-mode-p 'c++-mode) (lsp))
       ((derived-mode-p 'rust-mode) (lsp))
       ))
    (add-hook 'hack-local-variables-hook #'my-local-variables-hook)

    ;; Standard use-package hook setup
    ;; :hook ((python-mode . lsp)
    ;;         ;; (lsp-mode . lsp-enable-which-key-integration)
    ;;         ;; (c++-mode . lsp)
    ;;       )

    :config
    ;; Likely broken with last lsp update. Error on emacs startup:
    ;;
    ;; Error (use-package): lsp-mode/:config: Wrong type argument: (or
    ;; string function (and list (satisfies (lambda (l) (seq-every-p
    ;; (lambda (el) (stringp el)) l))))), lsp-clients--clangd-command,
    ;; command
    ;;
    ;; (lsp-register-client
    ;;  (make-lsp-client
    ;;   :new-connection
    ;;   (lsp-tramp-connection
    ;;    'lsp-clients--clangd-command)
    ;;   :major-modes '(c-mode c++-mode objc-mode)
    ;;   :priority -1
    ;;   :remote? t
    ;;   :server-id 'clangd-remote))
    )

  (use-package lsp-ui
    :commands lsp-ui-mode
    :custom
    (lsp-ui-doc-enable nil)
    :general
    (:states '(motion) :keymaps '(lsp-ui-imenu-mode-map)
     "RET" 'lsp-ui-imenu--view)
    :config
    (add-to-list 'evil-motion-state-modes 'lsp-ui-imenu-mode))

  (use-package company-lsp
    :commands company-lsp)

  (use-package lsp-ivy
    :commands lsp-ivy-workspace-symbol)

  (use-package company-lsp :commands company-lsp)
  (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)

  (use-package emacs-lisp
    :general
    (:states
     '(normal visual)
     :keymaps '(emacs-lisp-mode-map)
     "N" 'forward-sexp
     "E" 'backward-sexp))

  (use-package lispy
    :diminish
    :commands (emacs-lisp-mode)
    :general
    (:keymaps '(lispy-mode-map)
     ;; was lispy-left
     "M-n" 'tmux-window-navigation/move-down)
    :init
    (add-hook 'emacs-lisp-mode-hook
              (lambda () (lispy-mode 1)))
    :config)

  (use-package lispyville
    :diminish
    :after lispy
    :general
    (:states '(motion)
     :keymaps '(lispyville-mode-map)
     ;; was lispyville-{beginning,end}-of-defun
     ;; from key theme: additional-motions
     "M-h" 'tmux-window-navigation/move-left
     "M-l" 'tmux-window-navigation/move-right)
    :init
    (add-hook 'lispy-mode-hook #'lispyville-mode)
    :config
    (lispyville-set-key-theme
     '(operators
       ;; additional-motions
       slurp/barf-cp
       commentary)))

  (use-package eldoc
    :diminish)

  (use-package lua-mode
    :custom
    (lua-indent-level 2))

  ;; Markdown mode
  (use-package markdown-mode
    :defer t
    :init
    (add-to-list 'auto-mode-alist '("\\.text\\'" . markdown-mode))
    (add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
    (add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode)))

  (use-package rst-mode
    :defer t
    :init
    (add-hook 'rst-mode-hook 'flyspell-mode)
    (add-hook 'rst-mode-hook (lambda () (setq-local fill-column 80) (auto-fill-mode)))
    :config
    (defun amd/move-rst-section (beg end &optional move-up)
      "Move rst section."
      (interactive "r")
      (let ((text (delete-and-extract-region beg end)))
        (if move-up
            (call-interactively 'rst-backward-section)
          (call-interactively 'rst-forward-section))
        (insert text)
        (call-interactively 'rst-backward-section)))
    (defun amd/move-rst-section-down ()
      (interactive)
      (rst-mark-section)
      (amd/move-rst-section (region-beginning) (region-end) nil))
    (defun amd/move-rst-section-up ()
      (interactive)
      (rst-mark-section)
      (amd/move-rst-section (region-beginning) (region-end) t))
    :general
    (:states '(motion) :keymaps '(rst-mode-map)
     "E" 'rst-backward-section
     "N" 'rst-forward-section
     "M-<down>" 'amd/move-rst-section-down
     "M-<up>" 'amd/move-rst-section-up))

  ;; Web Settings
  (use-package web-mode
    :defer t
    :general
    (:states '(insert) :keymaps '(web-mode-map)
     "C-e" 'emmet-expand-line)
    :init
    (setq web-mode-markup-indent-offset 2
          web-mode-css-indent-offset 2
          web-mode-code-indent-offset 2)
    (setq web-mode-style-padding 2
          web-mode-script-padding 2
          web-mode-block-padding 0)
    (setq web-mode-enable-current-element-highlight t)
    (setq web-mode-enable-current-column-highlight t)
    (setq web-mode-engines-alist '(("liquid" . "\\.html\\'")))
    (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.hbs\\'" . web-mode)))

  (use-package python
    :commands python-mode
    :init
    (setq python-shell-interpreter "ipython"
          python-shell-interpreter-args "-i"))

  ;; Python Settings
  (use-package elpy
    ;; https://github.com/jorgenschaefer/elpy
    :disabled
    :custom
    (elpy-rpc-python-command "python3")
    (elpy-modules '(elpy-module-sane-defaults
                    elpy-module-company
                    elpy-module-eldoc
                    elpy-module-flymake
                    ;; elpy-module-highlight-indentation
                    elpy-module-pyvenv
                    ;; elpy-module-yasnippet
                    elpy-module-django)))

  (use-package js2-mode
    :defer t
    :init
    ;; (add-hook 'js-mode-hook 'js2-minor-mode)
    (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode)))

  ;; (use-package ac-js2
  ;;   :defer t
  ;;   :init
  ;;   (add-hook 'js2-mode-hook 'ac-js2-mode))

  ;; Ruby Settings
  (use-package robe
    :defer t
    :init
    (setq ruby-deep-indent-paren nil)
    (add-hook 'ruby-mode-hook 'robe-mode)
    (add-hook 'robe-mode-hook 'ac-robe-setup)
    ;; (push 'company-robe company-backends)

    (add-hook 'ruby-mode-hook (lambda () (modify-syntax-entry ?_ "w")))
    ;; super word should handle the above
    ;; (add-hook 'ruby-mode-hook 'superword-mode)

    ;; (add-to-list 'load-path "~/.emacs.d/xmpfilter")
    ;; (require 'rcodetools)
    ;; (global-set-key (kbd "C-c C-c") 'xmp)
    (eval-after-load 'inf-ruby
      `(add-to-list 'inf-ruby-implementations '("bundle console"))))

  ;; Set Evil indentation amount to python indent amount. Necessary if a value other than the default of 4.
  (add-hook 'python-mode-hook
            (function (lambda ()
                        (setq evil-shift-width python-indent-offset))))
  (add-hook 'ruby-mode-hook
            (function (lambda ()
                        (setq evil-shift-width ruby-indent-level))))

  (use-package yari)

  (add-to-list 'auto-mode-alist '("\\.ino\\'" . c++-mode))
  (add-to-list 'auto-mode-alist '("\\.p8\\'" . lua-mode))

  (defun amd/make-underscore-word-character ()
    (interactive)
    (modify-syntax-entry ?_ "w"))

  ;; (add-hook 'prog-mode-hook #'(lambda () (modify-syntax-entry ?_ "w")))
  ;; (add-hook 'c-mode-common-hook 'amd/make-underscore-word-character)
  ;; (add-hook 'rust-mode-hook 'amd/make-underscore-word-character)

  (use-package flycheck
    :diminish
    ;; :commands (flycheck-list-errors)
    :demand
    :custom
    ;; (flycheck-display-errors-function 'flycheck-display-error-messages-unless-error-list)
    (flycheck-display-errors-function nil)
    (flycheck-check-syntax-automatically '(save new-line mode-enabled)) ;; idle-change
    :general
    (:states '(motion) :keymaps '(flycheck-error-list-mode-map)
             "RET" 'flycheck-error-list-goto-error
             "E" 'flycheck-error-list-explain-error
             "F" 'flycheck-error-list-reset-filter
             "f" 'flycheck-error-list-set-filter
             "g" 'flycheck-error-list-check-source
             "C-n" 'flycheck-error-list-next-error
             "C-p" 'flycheck-error-list-previous-error)
    :init
    ;; (setq flycheck-c/c++-gcc-executable "/home/chrx/apps/arduino-1.8.5/hardware/teensy/../tools/arm/bin/arm-none-eabi-gcc")
    ;; -E -CC -x c++ -w  -g -Wall -ffunction-sections -fdata-sections -nostdlib -fno-exceptions -felide-constructors -std=gnu++14 -fno-rtti -mthumb -mcpu=cortex-m4 -mfloat-abi=hard -mfpu=fpv4-sp-d16 -fsingle-precision-constant -D__MK66FX1M0__ -DTEENSYDUINO=141 -DARDUINO=10805 -DF_CPU=180000000 -DUSB_SERIAL -DLAYOUT_US_ENGLISH
    ;; (setq flycheck-gcc-include-path
    ;;       '("/home/chrx/apps/arduino-1.8.5/hardware/teensy/avr/cores/teensy3"
    ;;         "/home/chrx/apps/arduino-1.8.5/hardware/teensy/avr/libraries/Audio"
    ;;         "/home/chrx/apps/arduino-1.8.5/hardware/teensy/avr/libraries/SPI"
    ;;         "/home/chrx/apps/arduino-1.8.5/hardware/teensy/avr/libraries/SD"
    ;;         "/home/chrx/apps/arduino-1.8.5/hardware/teensy/avr/libraries/SerialFlash"
    ;;         "/home/chrx/apps/arduino-1.8.5/hardware/teensy/avr/libraries/Wire"
    ;;         "/home/chrx/apps/arduino-1.8.5/hardware/teensy/avr/libraries/EEPROM"
    ;;         "/home/chrx/apps/arduino-1.8.5/hardware/teensy/avr/libraries/SPI"
    ;;         "/home/chrx/Arduino/libraries/Gameduino2"))

    :config
    (setq flycheck-error-list-format
          [("File" 16)
           ("Line" 5 flycheck-error-list-entry-< :right-align t)
           ("Col" 4 nil :right-align t)
           ("Level" 8 flycheck-error-list-entry-level-<)
           ("ID" 20 t)
           (#("Message (Checker)" 9 16
              (face flycheck-error-list-checker-name))
            0 t)])

    (add-to-list 'evil-motion-state-modes 'flycheck-error-list-mode)
    ;; larger fringe on the left, no fringe on the right
    (add-to-list 'fringe-styles '("large" 17 . 0))
    (fringe-mode (cons 17 0))
    ;; double size fringe bitmap
    (define-fringe-bitmap 'flycheck-fringe-bitmap-double-arrow
      (vector #b0000000000000000
              #b0000000000000000
              #b0000111111110000
              #b0000111111110000
              #b0000111111110000
              #b0000111111110000
              #b0000111111110000
              #b0000111111110000
              #b0000111111110000
              #b0000111111110000
              #b0000111111110000
              #b0000111111110000
              #b0000111111110000
              #b0000111111110000
              #b0000111111110000
              #b0000111111110000
              #b0000111111110000
              #b0000111111110000
              #b0000111111110000
              #b0000111111110000
              #b0000111111110000
              #b0000111111110000
              #b0000111111110000
              #b0000111111110000
              #b0000000000000000
              #b0000000000000000
              #b0000000000000000
              #b0000000000000000
              #b0000111111110000
              #b0000111111110000
              #b0000111111110000
              #b0000111111110000
              #b0000000000000000
              #b0000000000000000))
    (global-flycheck-mode))

  (use-package flycheck-eglot
    :disabled
    :after (flycheck eglot)
    :config
    (global-flycheck-eglot-mode 1))

  (use-package flycheck-rust
    :defer t
    :init
    (add-hook 'rust-mode-hook 'flycheck-rust-setup))

  (use-package flymake-ruby
    :defer t
    :init
    (add-hook 'ruby-mode-hook 'flymake-ruby-load))

  (use-package flymake-haml
    :defer t
    :init
    (add-hook 'haml-mode-hook 'flymake-haml-load))

  (use-package sql
    :defer t
    :general
    (:states '(normal)
     :keymaps '(sql-interactive-mode-map)
      "C-d"  'evil-scroll-down)
    (:states '(insert)
     :keymaps '(sql-interactive-mode-map)
      "<up>"   'comint-previous-input
      "<down>" 'comint-next-input)
    (:states '(normal insert)
     :keymaps '(sql-interactive-mode-map)
      "C-e" 'comint-previous-prompt
      "C-n" 'comint-next-prompt
      "C-l" 'comint-clear-buffer
      "M-e" 'tmux-window-navigation/move-up
      "M-n" 'tmux-window-navigation/move-down))

  (use-package sqlup-mode
    :defer t
    :init
    (add-hook 'sql-mode-hook 'sqlup-mode))

  (use-package sql-indent
    :defer t
    :after sql
    :init
    (setq sql-indent-offset 2)
    (setq sql-indent-first-column-regexp
          (concat
           "\\(^\\s-*"
           (regexp-opt
            '("select" "update" "insert" "delete"
              "union" "intersect"
              "from" "where" "into" "group" "having" "order" "limit"
              "join" "right join" "left join" "right outer join" "left outer join" "right inner join" "left inner join"
              "set"
              "create" "drop" "truncate"
              "define" "eof" "export"
              "alter" "grant"
              ")"
              "--") t) "\\(\\b\\|\\s-\\)\\)\\|\\(^```$\\)")))

  (use-package scad-mode
    :defer t
    :init
    (when (eq system-type 'darwin)
      (setq scad-command "/Applications/OpenSCAD.app/Contents/MacOS/OpenSCAD")))

  (use-package graphviz-dot-mode
    :defer t
    :init
    (setq graphviz-dot-auto-indent-on-semi nil
          graphviz-dot-auto-indent-on-newline nil
          graphviz-dot-dot-program "dot"
          graphviz-dot-preview-extension "svg"))

  (use-package jinja2-mode
    :config
    (add-to-list 'auto-mode-alist '("\\.jinja\\'" . jinja2-mode)))

  (use-package forth-mode :defer t)
  (use-package forth-block-mode :defer t)

  (use-package gn-mode
    :custom
    (gn-indent-method 'gn-indent-line-inductive)
    :config
    (add-to-list 'auto-mode-alist '("\\.gn\\'" . gn-mode))
    (add-to-list 'auto-mode-alist '("\\.gni\\'" . gn-mode)))

  (use-package ninja-mode :defer t)

  (use-package rust-mode
    :custom
    (rust-format-on-save nil))
#+end_src

* hydra

| color    | toggle                     |
|----------+----------------------------|
| red      |                            |
| blue     | :exit t                    |
| amaranth | :foreign-keys warn         |
| teal     | :foreign-keys warn :exit t |
| pink     | :foreign-keys run          |

#+begin_src emacs-lisp
  (use-package hydra
    ;; :init
    ;; (when (display-graphic-p)
    ;;   ;; Use posframe for hydra display
    ;;   (setq hydra-hint-display-type 'posframe
    ;;         hydra-posframe-show-params
    ;;         '(:internal-border-width
    ;;           1
    ;;           :internal-border-color
    ;;           "cyan"
    ;;           :poshandler
    ;;           posframe-poshandler-frame-top-left-corner
    ;;           ;; posframe-poshandler-window-center
    ;;           ;; posframe-poshandler-frame-center
    ;;           ;; posframe-poshandler-frame-top-center
    ;;           ;; posframe-poshandler-frame-top-right-corner
    ;;           ;; posframe-poshandler-frame-bottom-center
    ;;           ;; posframe-poshandler-frame-bottom-left-corner
    ;;           ;; posframe-poshandler-frame-bottom-right-corner
    ;;           ;; posframe-poshandler-window-center
    ;;           ;; posframe-poshandler-window-top-center
    ;;           ;; posframe-poshandler-window-top-left-corner
    ;;           ;; posframe-poshandler-window-top-right-corner
    ;;           ;; posframe-poshandler-window-bottom-center
    ;;           ;; posframe-poshandler-window-bottom-left-corner
    ;;           ;; posframe-poshandler-window-bottom-right-corner
    ;;           ;; posframe-poshandler-point-top-left-corner
    ;;           ;; posframe-poshandler-point-bottom-left-corner
    ;;           ))
    ;;   )

    :config
    (defhydra hydra-font (:color red :columns 4)
      ("h"  (lambda () (interactive)
              (amd/set-font (- amd/font-size 1.0) amd/font-name))
       (format "smaller %.2f" amd/font-size))
      ("l"  (lambda () (interactive)
              (amd/set-font (+ amd/font-size 1.0) amd/font-name))
       (format "larger" amd/font-size))
      ("j"  (lambda () (interactive)
              (let ((new-value (if amd/font-antialias 'no 'yes)))
                (message "%s" new-value)
                (amd/set-font amd/font-size amd/font-name new-value)))
       (format "[%s] antialias" (if amd/font-antialias "x" " ")))
      ("RET" keyboard-escape-quit "quit" :exit t)
      ("a"  (lambda () (interactive)
              (amd/set-font amd/font-size "Iosevka SS08 Light"))
       (format "[%s] Iosevka SS08"
               (if (string-equal amd/font-name "Iosevka SS08 Light") "x" " ")))
      ("r"  (lambda () (interactive)
              (amd/set-font amd/font-size "Iosevka Term SS17 Light"))
       (format "[%s] Iosevka Term SS17"
               (if (string-equal amd/font-name "Iosevka Term SS17 Light") "x" " ")))
      ("s"  (lambda () (interactive)
              (amd/set-font amd/font-size "PragmataPro"))
       (format "[%s] PragmataPro"
               (if (string-equal amd/font-name "PragmataPro") "x" " ")))
      ("c"  (lambda () (interactive)
              (amd/set-font amd/font-size "CozetteVector"))
       (format "[%s] CozetteVector"
               (if (string-equal amd/font-name "CozetteVector") "x" " "))))
    (message "use-package: hydra :config"))

  (defun amd/hydra-column-hint (column-groups)
    "Generate a hydra hint string from a list of COLUMN-GROUPS."
    (require 's)
    (require 'dash)
    (let* ((column-strings
            ;; collect the key and name string for each hydra head
            ;; fill columns to the same height with the "^^" string
            (apply #'-pad (cons '("^^" " ")
                                (-map (lambda (column-group)
                                        (-map (lambda (column-head)
                                                ;; get the strings defined in this head
                                                (setq h (-filter 'stringp column-head))
                                                ;; surround the key string with underscores
                                                (if (equal nil h)
                                                    (list "^^" " ")
                                                  (list (s-concat "_" (-first-item h) "_") (-last-item h))))
                                              column-group))
                                      column-groups))))
           ;; get the max key string width for each column
           (max-key-widths
            (-map (lambda (column-group)
                    (-max
                     (-map (lambda (column-head)
                             (length (-first-item column-head)))
                           column-group)))
                  column-strings))
           ;; get the max name string width for each column
           (max-name-widths
            (-map (lambda (column-group)
                    (-max
                     (-map (lambda (column-head)
                             (length (-last-item column-head)))
                           column-group)))
                  column-strings)))

      ;; build the hint string starting with a "\n"
      (let ((hint "\n"))
        ;; for each row
        (-each (-iterate '1+ 0 (length (car column-strings)))
          (lambda (row-index)
            ;; get the current row
            (setq row (-select-column row-index column-strings))
            ;; append the new row
            (setq hint
                  (concat
                   hint
                   (s-join "  " ;; join the colums
                           (--map (s-join "  " it) ;; join the key and name strings →
                                  (-zip-with 'list
                                             ;; right-pad the key string with the max key string width for this column
                                             (-map (lambda (pair)
                                                     (s-pad-right (-first-item pair) " " (-last-item pair)))
                                                   (-zip-with 'list max-key-widths (-select-column 0 row)))
                                             ;; right-pad the name string with the max name string width for this column
                                             (-map (lambda (pair)
                                                     (s-pad-right (-first-item pair) " " (-last-item pair)))
                                                   (-zip-with 'list max-name-widths (-select-column 1 row))
                                                   ))))
                   "\n" ))))
        hint)))

  (defun amd/define-hydra-with-columns (name color columns)
    "Create a column based hydra with the given NAME, COLOR, and COLUMNS."
    (interactive)

    (eval `(defhydra ,name (:color ,color :hint nil)
             ,(amd/hydra-column-hint columns)
             ,@(-flatten-n 1 (-map (lambda (column-group)
                                     (--filter (not (null it))
                                               (-map (lambda (column-head)
                                                       (-remove-last 'stringp column-head))
                                                     column-group)))
                                   (-clone columns))))))

  ;; ;; For quoting with , and ,@ see:
  ;; ;; https://www.gnu.org/software/emacs/manual/html_node/elisp/Backquote.html
  ;; (eval `(defhydra hydra-org-menu (:color blue :hint nil :columns ,(length amd/hydra-org-columns))
  ;;          "Hydra-Org"
  ;;          ,@(->> (-iterate '1+ 0 (length (car amd/hydra-org-columns))) ;; (0 1 2 3 4 ... )
  ;;                 (-map (lambda (i) (-select-column i amd/hydra-org-columns)))
  ;;                 (-flatten-n 1)
  ;;                 (-non-nil))))
#+end_src

* hydra leader menus

** Main Leader Hydra

#+begin_src emacs-lisp
  (defun amd/pretty-hydra-strip-header (docstring)
    (replace-regexp-in-string "\n\\([^\n]+\n\\)[-=─]+\n" "\\1" docstring))

  (pretty-hydra-define hydra-align-menu (:color blue)
    ("a: Align"
     (("r" align-repeat "align repeat")
      ("n" align-no-repeat "align no-repeat")
      (":" align-to-colon "align :")
      ("=" align-to-equals "align =")
      ("," align-to-comma "align ,")
      ("s" align-to-space "align whitespace")
      ("i" align-interactively "align interactive"))))

  (pretty-hydra-define hydra-set-toggles (:color blue :quit-key "q" :formatter (lambda (docstring) (replace-regexp-in-string "\n\\([^\n]+\n\\)[-=─]+\n" "\\1" docstring)))
    ("Line Endings"
     (("t" toggle-truncate-lines "truncate-lines" :toggle truncate-lines :color amaranth)
      ("a" auto-fill-mode "auto-fill-mode" :toggle auto-fill-function :color amaranth)
      ;; ("f" fci-mode "fill column indicator mode" :toggle t :color amaranth) ;; emacs26
      ("fc" display-fill-column-indicator-mode "fill column indicator mode" :toggle t :color amaranth) ;; emacs27
      ("fr" fringe-mode "fringe-mode" :toggle (not (eq fringe-mode 0)) :color amaranth))
     "Line Numbers"
     (("l" display-line-numbers-mode "display-line-numbers-mode" :toggle t :color amaranth)
      ("h" hl-line-mode "hl-line-mode" :toggle t :color amaranth)
      ("C" amd-center-buffer-mode "amd-center-buffer-mode" :toggle t :color amaranth)
      ("i" highlight-indent-guides-mode "highighlight-indent-guides-mode" :toggle t :color amaranth))
     "Appearance"
     (("r" rainbow-delimiters-mode "rainbow-delimiters-mode" :toggle t :color amaranth)
      ("c" color-identifiers-mode "color-identifiers-mode" :toggle t :color amaranth)
      ("g" glasses-mode "glasses-mode" :toggle t :color amaranth)
      ("w" whitespace-mode "whitespace-mode" :toggle t :color amaranth)
      ("ff" hydra-font/body "Font" :color blue)
      )))

  (amd/define-hydra-with-columns 'hydra-leader-menu 'blue
   `((("d" counsel-find-file      "find-file")
      ("g" magit-status           "git")
      ("s" hydra-set-toggles/body "set-toggles")
      ("u" undo-tree-visualize    "undo-tree")
      ("w" ace-window             "window")
      ("t" hydra-tab-bar/body     "tabs")
      ("c" calc-dispatch          "calc")
      ("j" counsel-imenu          "jump-imenu")
      ("v" (find-file
            ;; user-emacs-directory
            "~/dot-all/"
            )  "open .emacs")
      ("V" (find-file amd/settings-org-file) "open README.org"))

     (("fc" flycheck-list-errors    "flycheck")
      ("fn" flycheck-next-error     "flycheck next error")
      ("fp" flycheck-previous-error "flycheck prev error")
      ("bb" switch-to-buffer        "buffer switch")
      ("bi" ibuffer                 "buffer ibuffer")
      ("bk" kill-this-buffer        "buffer kill")
      ("br" revert-buffer           "buffer revert")
      ("yb" amd/copy-buffer         "yank buffer")
      ("yxy" amd/x-yank             "xsel yank")
      ("yxp" amd/x-paste            "xsel paste"))

     (("a" hydra-align-menu/body "align")
      ("G"  counsel-git-grep       "search git grep")
      ;; ("rgg"  counsel-rg       "ripgrep")
      ("rg"  amd/counsel-rg-with-initial-directory  "ripgrep w/ dir")
      ("pa" counsel-ag             "search ag counsel")
      ("pf" amd/counsel-ag-with-filename-regex "search ag filename regex")
      ;; ("pt" counsel-pt             "search pt counsel")
      ;; ("pp" projectile-pt          "search pt project")
      ;; ("po" pt-regexp              "search pt other")
      ("/"  counsel-grep-or-swiper "search grep/swiper")
      ("bu"  browse-url "browse-url")
      (,amd/leader-key amd/major-mode-leader-hydra  "major-mode hydra"))

     (("la" counsel-linux-app                "linux apps")
      ("lt" load-theme                       "load theme")
      ("lc" list-colors-display              "list colors")
      ("lf" list-faces-display               "list faces")
      ("lp" package-list-packages            "list packages")
      ("hk" counsel-descbinds                "help keys")
      ("hK" which-key-show-top-level         "help whichkey")
      ("hm" (describe-variable 'major-mode)  "help mode")
      ("hr" yari                             "help ruby")
      ("bu" browse-url-generic               "browse url"))

     (("pi" projectile-invalidate-cache      "project clear")
      ("ps" ivy-switch-project               "project switch")
      ("pe" amd/eshell-or-project-eshell     "project eshell")
      ("rf" counsel-recentf                  "counsel-recentf")
      ("rt" run-current-test                 "run test")
      ("rF" (run-current-test nil t)         "run file")
      ("rp" run-pico8                        "run pico8")
      ("rl" run-love2d                       "run love2d")
      ("rc" compile                          "run compile")
      ("rr" recompile                        "run recompile"))

     (("zi" (text-scale-increase 0.5)  "zoom-in" :color pink)
      ("zo" (text-scale-decrease 0.5)  "zoom-out" :color pink)
      ("DS" desktop-save               "desktop-save")
      ("DC" desktop-clear              "desktop-clear")
      ("DL" desktop-read               "desktop-read")
      ("zz" server-edit                "server-edit done")
      ("WC" count-words                "word-count")
      ("xf" (shell-command-on-region
             (point-min) (point-max)
             "xmllint --format -" (current-buffer) t)
                                       "xml format")
      ("xx"  counsel-M-x               "M-x")
      ("q"  keyboard-quit :exit t      "close"))))

  ;; ("y"  counsel-yank-pop            "yank hist--ory") use ctrl-y in evil insert mode
  ;; ("im" counsel-imenu "imenu")
  ;; ("q"  keyboard-escape-quit :exit t  "close")
  ;; ("m" mu4e "mu4e")

  ;; (define-key evil-normal-state-map amd/leader-key 'hydra-leader-menu/body)
  ;; (define-key evil-motion-state-map amd/leader-key 'hydra-leader-menu/body)
  ;; (define-key evil-visual-state-map amd/leader-key 'hydra-leader-menu/body)

  ;; (setq hydra-key-doc-function 'amd/hydra-key-doc-function)
  ;; (defun amd/hydra-key-doc-function (key key-width doc doc-width)
  ;;   "Doc"
  ;;   (format (format "%%%ds %%%ds" key-width (- -1 doc-width))
  ;;           key doc))
#+end_src

** Major Mode Leader Hydra Function

#+begin_src emacs-lisp
  (defun amd/major-mode-leader-hydra ()
    (interactive)
    (cond ((eq major-mode 'org-mode)
           (hydra-org-menu/body))

          ((or (eq major-mode 'lisp-interaction-mode)
               (eq major-mode 'emacs-lisp-mode))
           (hydra-elisp-menu/body))

          ((eq major-mode 'rust-mode)
           (hydra-rust-menu/body))

          ;; if no major-mode leader hydra defined, and an org-src buffer is active, use the org hydra
          ((member 'org-src-mode minor-mode-list)
           (hydra-org-menu/body))

          (t
           (keyboard-quit))))
#+end_src

** Org Hydra

#+begin_src emacs-lisp
  (defun amd/toggle-org-edit-code-block ()
    "Start or finish editing an org code block."
    (interactive)
    (if org-src--beg-marker ;; (cl-find 'org-src-mode minor-mode-list)
        (progn
          (org-edit-src-exit)
          (recenter))
      (progn
        (org-edit-special)
        (recenter))))

  (amd/define-hydra-with-columns
   'hydra-org-menu
   'blue
   '((("cc" org-capture "capture")
      ("cl" org-store-link "store link")
      ("ci" org-clock-in "clock in")
      ("co" org-clock-out "clock out")
      ("cd" org-clock-display "clock display")
      ("o" (lambda() (interactive) (find-file org-default-notes-file)) "open todos"))

     (("fc" org-table-toggle-coordinate-overlays "formula coords")
      ("fd" org-table-toggle-formula-debugger "formula debug")
      ("fe" (lambda() (interactive)
              (let ((current-prefix-arg '(16))) ;; emulate C-u C-u
                (call-interactively 'org-table-eval-formula)
                (evil-insert-state)
                )) "formula edit")
      ("fr" (lambda() (interactive)
              (let ((current-prefix-arg '(4))) ;; emulate C-u
                (call-interactively 'org-table-recalculate)
                )) "formula recalc")
      ("tp" (lambda() (interactive)
              ;; (let ((current-prefix-arg 4)) ;; emulate C-u
              ;;   (call-interactively 'org-babel-tangle))
              (org-narrow-to-element)
              (org-babel-tangle)
              (widen)
              ) "tangle at point")
      ("ta" org-babel-tangle "tangle all"))

     (("P" org-set-property "property")
      ("S" org-schedule "schedule")
      ("D" org-deadline "due")
      ("r" org-refile "refile")
      ("p" org-priority "priority")
      ("ih" org-babel-insert-header-arg "insert header"))

     (("a" org-agenda "agenda")
      ("y" org-archive-subtree "archive subtree")
      ("R" org-mode-restart "restart")
      ("l" counsel-org-tag "change tag (label)")
      ("e" amd/toggle-org-edit-code-block "code edit"))

     (("tt" org-show-todo-tree "todo tree")
      ("A" (lambda() (interactive) (show-all) (org-remove-occur-highlights)) "show all")
      ("w" widen "widen")
      ("n" org-narrow-to-subtree "subtree")
      ("gl" org-match-sparse-tree "tag tree"))

     ;; (("h" org-shiftmetaleft  "←" :color pink)
     ;;  ("l" org-shiftmetaright "→" :color pink)
     ;;  ("n" org-shiftmetadown  "↓" :color pink)
     ;;  ("e" org-shiftmetaup    "↑" :color pink))

     (("d" pandoc-main-hydra/body "pandoc")
      ("hy" amd/clipboard-org-buffer-to-html-xclip "org→html→yank")
      ("hp" amd/clipboard-html-to-org-pandoc-linux "html→org→paste")
      ("x" org-export-dispatch "export")
      ("q"  keyboard-quit :exit t "close"))))
#+end_src

** Emacs-Lisp Hydra

#+begin_src emacs-lisp
  (amd/define-hydra-with-columns
   'hydra-elisp-menu
   'blue
   '((("e" amd/toggle-org-edit-code-block "[org] toggle code edit"))
     (("d" eval-defun            "eval defun"))
     (("D" amd/edebug-eval-defun "eDebug defun"))
     (("q"  keyboard-quit :exit t "close"))))
#+end_src

** Rust-mode Hydra

#+begin_src emacs-lisp
  (amd/define-hydra-with-columns
   'hydra-rust-menu
   'blue
   '((("t" rust-test "test"))
     (("k" rust-check "check"))
     (("l" rust-run-clippy "clippy"))
     (("r" rust-run "run"))
     (("f"  rust-format-buffer "format"))
     (("q"  keyboard-quit :exit t "close"))))
#+end_src

* completion frameworks

** orderless

#+begin_src emacs-lisp
  (use-package orderless
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

** consult

#+begin_src emacs-lisp
  ;; Example configuration for Consult
  (use-package consult
    :disabled
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind
    (;; C-c bindings (mode-specific-map)
     ("C-c h" . consult-history)
     ("C-c m" . consult-mode-command)
     ("C-c k" . consult-kmacro)
     ;; C-x bindings (ctl-x-map)
     ("C-x M-:" . consult-complex-command) ;; orig. repeat-complex-command
     ("C-x b" . consult-buffer)            ;; orig. switch-to-buffer
     ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
     ("C-x 5 b" . consult-buffer-other-frame) ;; orig. switch-to-buffer-other-frame
     ("C-x r b" . consult-bookmark)           ;; orig. bookmark-jump
     ("C-x p b" . consult-project-buffer)     ;; orig. project-switch-to-buffer
     ;; Custom M-# bindings for fast register access
     ("M-#" . consult-register-load)
     ("M-'" . consult-register-store) ;; orig. abbrev-prefix-mark (unrelated)
     ("C-M-#" . consult-register)
     ;; Other custom bindings
     ("M-y" . consult-yank-pop)           ;; orig. yank-pop
     ("<help> a" . consult-apropos)       ;; orig. apropos-command
     ;; M-g bindings (goto-map)
     ("M-g e" . consult-compile-error)
     ("M-g f" . consult-flymake)           ;; Alternative: consult-flycheck
     ("M-g g" . consult-goto-line)         ;; orig. goto-line
     ("M-g M-g" . consult-goto-line)       ;; orig. goto-line
     ("M-g o" . consult-outline)           ;; Alternative: consult-org-heading
     ("M-g m" . consult-mark)
     ("M-g k" . consult-global-mark)
     ("M-g i" . consult-imenu)
     ("M-g I" . consult-imenu-multi)
     ;; M-s bindings (search-map)
     ("M-s d" . consult-find)
     ("M-s D" . consult-locate)
     ("M-s g" . consult-grep)
     ("M-s G" . consult-git-grep)
     ("M-s r" . consult-ripgrep)
     ("M-s l" . consult-line)
     ("M-s L" . consult-line-multi)
     ("M-s m" . consult-multi-occur)
     ("M-s k" . consult-keep-lines)
     ("M-s u" . consult-focus-lines)
     ;; Isearch integration
     ("M-s e" . consult-isearch-history)
     :map isearch-mode-map
     ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
     ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
     ("M-s l" . consult-line) ;; needed by consult-line to detect isearch
     ("M-s L" . consult-line-multi) ;; needed by consult-line to detect isearch
     ;; Minibuffer history
     :map minibuffer-local-map
     ("M-s" . consult-history)        ;; orig. next-matching-history-element
     ("M-r" . consult-history))       ;; orig. previous-matching-history-element

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key (kbd "M-."))
    ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     ;; :preview-key (kbd "M-.")
     :preview-key '(:debounce 0.4 any))

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

    ;; By default `consult-project-function' uses `project-root' from project.el.
    ;; Optionally configure a different project root function.
    ;; There are multiple reasonable alternatives to chose from.
  ;;;; 1. project.el (the default)
    ;; (setq consult-project-function #'consult--default-project--function)
  ;;;; 2. projectile.el (projectile-project-root)
    ;; (autoload 'projectile-project-root "projectile")
    ;; (setq consult-project-function (lambda (_) (projectile-project-root)))
  ;;;; 3. vc.el (vc-root-dir)
    ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
  ;;;; 4. locate-dominating-file
    ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well. ;; (kbd "C-+")
    (setq consult-narrow-key "<"))
#+end_src

** embark

#+begin_src emacs-lisp
  (use-package embark
    :disabled
    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-h C-k" . embark-bindings)) ;; alternative for `describe-bindings'

    :init
    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)

    :config
    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))

  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :ensure t ; only need to install it, embark loads it after consult if found
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

** vertico

#+begin_src emacs-lisp
  (use-package vertico
    :disabled
    :init
    ;; Different scroll margin
    ;; (setq vertico-scroll-margin 0)

    ;; Show more candidates
    ;; (setq vertico-count 20)

    ;; Grow and shrink the Vertico minibuffer
    ;; (setq vertico-resize t)

    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    ;; (setq vertico-cycle t)

    ;; Must be in the :init section of use-package such that the mode gets
    ;; enabled right away. Note that this forces loading the package.
    (vertico-mode))
#+end_src

** marginalia

#+begin_src emacs-lisp
  (use-package marginalia
    :disabled
    :bind (:map minibuffer-local-map
                ("M-A" . marginalia-cycle))
    ;; The :init configuration is always executed (Not lazy!)
    :init
    ;; Must be in the :init section of use-package such that the mode gets
    ;; enabled right away. Note that this forces loading the package.
    (marginalia-mode))
#+end_src

** ivy

#+begin_src emacs-lisp
  (use-package ivy
    :custom
    (ivy-display-style 'fancy)
    (ivy-use-virtual-buffers t)
    (ivy-height 10)
    (ivy-fixed-height-minibuffer t)
    :config
    ;; Enable orderless
    (setq ivy-re-builders-alist '((t . orderless-ivy-re-builder)))
    (add-to-list 'ivy-highlight-functions-alist '(orderless-ivy-re-builder . orderless-ivy-highlight))

    (defvar ivy-switch-project-map (make-sparse-keymap))

    (defun ivy-switch-project ()
      (interactive)
      (let ((this-command 'ivy-switch-project))
        (projectile-load-known-projects)
        (ivy-read
         "Switch to project: "
         projectile-known-projects
         :action #'magit-status
         :keymap ivy-switch-project-map)))

    (ivy-set-actions
     'ivy-switch-project
     '(("k"
        (lambda (x) (setq projectile-known-projects
                     (--reject (string= x it) projectile-known-projects))
          (projectile-merge-known-projects)
          (ivy--reset-state ivy-last))
        "remove project")
       ("d" (lambda (x) (dired x))
        "dired")))

    ;; TODO: https://github.com/abo-abo/swiper/issues/2560
    ;; (defun amd/adjust-windows-for-minibuffer (&optional arg1 &rest args)
    ;;   ;; (message "bn: %s" (buffer-name))
    ;;   ;; (message "height: %s" (window-total-height))
    ;; )
    ;; (current-window-configuration)
    ;; (advice-add 'ivy--minibuffer-setup :after #'amd/adjust-windows-for-minibuffer)
    ;; (add-hook 'minibuffer-setup-hook #'amd/adjust-windows-for-minibuffer)
    ;; (add-hook 'minibuffer-exit-hook #'my-minibuffer-exit-hook)

    (defun counsel-calc-units ()
      (interactive)
      (require 'calc-units) ;; needed to access math-standard-units variable
      (let ((this-command 'counsel-calc-units))
        (ivy-read
         "Unit: "
         (mapcar
          (lambda (unit-list)
            (let* ((command (car unit-list))
                   (key (symbol-name command))
                   (doc (delq nil (mapcar (lambda (item) (when (stringp item) item)) (cdr unit-list))))
                   (doc-size (length doc))
                   (definition (cond ((eq doc-size 1) key) ((eq doc-size 2) (car doc)) ((eq doc-size 3) (car (reverse doc)))))
                   (description (cond ((eq doc-size 1) (format "%s (base unit)" (car (reverse doc)))) (t (car (cdr doc))))))
              (cons (format "%-12s %-30s %s" (propertize key 'face 'font-lock-builtin-face) definition description) key)))
          (append math-additional-units math-standard-units))
         :action (lambda (arg) (calc-alg-entry (cdr arg))))))

    (ivy-set-actions
     'counsel-calc-units
     '(("c"
        (lambda (arg) (calc-convert-units nil (cdr arg)))
        "convert"))))

  (use-package ivy-hydra
    :config
    (define-key hydra-ivy/keymap (kbd "h") 'hydra-ivy/ivy-prev-action)
    (define-key hydra-ivy/keymap (kbd "l") 'hydra-ivy/ivy-next-action)
    (define-key hydra-ivy/keymap (kbd "n") 'hydra-ivy/ivy-next-line)
    (define-key hydra-ivy/keymap (kbd "e") 'hydra-ivy/ivy-previous-line))
#+end_src

** ivy-xref

#+begin_src emacs-lisp
  (use-package ivy-xref
    :init (setq xref-show-xrefs-function #'ivy-xref-show-xrefs))
#+end_src

** swiper

#+begin_src emacs-lisp
  (use-package swiper
    :diminish ivy-mode
    :general
    (:keymaps '(ivy-minibuffer-map)
      "<escape>" 'minibuffer-keyboard-quit
      "C-e" 'previous-line
      ;; "C-n" 'next-line  ;; this is the default
      "<C-return>" 'ivy-alt-done
      "<C-M-return>" 'ivy-immediate-done)
    (:states '(motion)
     :keymaps '(ivy-occur-grep-mode-map)
      "M-n" 'tmux-window-navigation/move-down ;; was compilation-next-error
      "C-d" 'evil-scroll-down
      "C-u" 'evil-scroll-up
      "gg" 'evil-goto-first-line
      "G" 'evil-goto-line
      "k" 'evil-ex-search-next
      "n" 'ivy-occur-next-line
      "e" 'ivy-occur-previous-line
      "RET" 'ivy-occur-press-and-switch
      "N" 'next-error-no-select
      "E" 'previous-error-no-select)
    (:states '(motion)
     :keymaps '(grep-mode-map)
      "M-n" 'tmux-window-navigation/move-down ;; was compilation-next-error
      "C-d" 'evil-scroll-down
      "C-u" 'evil-scroll-up
      "gg" 'evil-goto-first-line
      "G" 'evil-goto-line
      "k" 'evil-ex-search-next
      "n" 'evil-next-line
      "e" 'evil-previous-line
      "N" 'next-error-no-select
      "E" 'previous-error-no-select)

    :config
    (add-to-list 'evil-normal-state-modes 'ivy-occur-grep-mode)
    (add-to-list 'evil-normal-state-modes 'grep-mode)
    (ivy-mode 1)

    (defun amd/update-evil-search (&optional arg1 &rest args)
      "Update evil search pattern history with the last swiper regex."
      ;; recenter after hitting RET from swiper is jarring.
      ;; (recenter)
      (let ((count 1)
            (direction 'forward)
            (regex (ivy--regex ivy-text)))
        ;; This bit is mostly taken from evil-ex-start-word-search
        (setq evil-ex-search-count count
              evil-ex-search-direction direction
              evil-ex-search-pattern (evil-ex-make-search-pattern regex)
              evil-ex-search-offset nil
              evil-ex-last-was-search t)
        ;; update search history unless this pattern equals the previous pattern
        (unless (equal (car-safe evil-ex-search-history) regex)
          (push regex evil-ex-search-history))
        (evil-push-search-history regex (eq direction 'forward))
        ;; set the highlight
        (evil-ex-search-activate-highlight evil-ex-search-pattern)))

    ;; TODO: update swiper history after evil-ex-search
    (advice-add 'swiper                 :after #'amd/update-evil-search)
    (advice-add 'counsel-git-grep       :after #'amd/update-evil-search)
    (advice-add 'counsel-grep           :after #'amd/update-evil-search)
    (advice-add 'counsel-grep-or-swiper :after #'amd/update-evil-search))
#+end_src

** counsel

#+begin_src emacs-lisp
  (use-package amx
    ;; used by counsel
    :config
    (amx-mode))

  (use-package counsel
    :after amx
    :demand
    :bind (("M-x" . counsel-M-x)
           ([f9] . amd/take-svg-screenshot)
           ("C-h k" . counsel-descbinds)
           ("C-h C-k" . counsel-descbinds))
    :init
    (setq counsel-grep-base-command "grep -niE \"%s\" %s")

    (defun amd/counsel-ag-with-filename-regex (fileregex)
      (interactive "sFilename Regex: ")
      (let* ((ag-command (car (split-string counsel-ag-base-command "%s")))
             (counsel-ag-base-command (concat ag-command " -G '" fileregex "' %s")))
        (counsel-ag)))

    (defun amd/counsel-rg-with-initial-directory (initial-directory extra-args)
      (interactive "DInitial Directory: \nsExtra Args: ")
      (counsel-rg nil initial-directory extra-args)))
#+end_src

** ivy-posframe

#+begin_src emacs-lisp
  (use-package ivy-posframe
    :disabled
    :diminish
    :init
    (setq
     ivy-posframe-height-alist '((swiper . 10)
                                 (t . 10))
     ivy-posframe-width 100
     ivy-posframe-display-functions-alist
     '((swiper . ivy-posframe-display-at-window-bottom-left)
       ;; (t . ivy-posframe-display-at-window-bottom-left)
       (t . ivy-posframe-display-at-frame-top-center)
       ;; (t . ivy-posframe-display-at-window-center)
       ;; (t . ivy-posframe-display-at-frame-bottom-left)
       ;; (t . ivy-posframe-display-at-frame-center)
       ;; (t . ivy-posframe-display)
       )
     ivy-posframe-parameters
     '((internal-border-width . 16)
       ;; (line-spacing . 4)
       ;; (min-height . 10)
       ;; (height     . 10)
       ;; (min-width  . 1)
       ;; (width      . 80)
       ;; (left-fringe . 17)
       ;; (right-fringe . 17)
       ))
    :config
    (ivy-posframe-mode 1))
#+end_src

* helpful

#+begin_src emacs-lisp
  (use-package helpful
    :after counsel
    :bind (("C-h v"   . helpful-variable)
           ("C-h C-v" . helpful-variable)
           ("C-h f"   . helpful-function)
           ("C-h C-f" . helpful-function)
           ("C-h s"   . helpful-symbol))
    :init
    :config
    (add-to-list 'evil-motion-state-modes 'helpful-mode)
    (add-to-list 'evil-motion-state-modes 'elisp-refs-mode)
    (ivy-set-actions
     'counsel-M-x
     '(("d" counsel--find-symbol "definition")
       ("h" (lambda (x) (helpful-function (intern x))) "helpful"))))
#+end_src

* fun

#+begin_src emacs-lisp
  (use-package zone
    :config
    ;; (zone-when-idle 180)
    (defun zone-choose ()
      "Choose a PGM to run for `zone'."
      (interactive)
      (let ((current-prefix-arg 4)) ;; emulate C-u
        (call-interactively 'zone))))

  (use-package retris
    :commands retris
    :load-path "retris"
    :init
    :config
    (add-to-list 'evil-emacs-state-modes 'retris-mode))

  (use-package 2048-game
    :commands 2048-game
    :init
    :config
    (add-to-list 'evil-emacs-state-modes '2048-mode))
#+end_src

* org

** Help docs

- [[info:org#Using header arguments][info:org#Using header arguments]]
- [[info:org#Specific header arguments][info:org#Specific header arguments]]
- [[info:org#Structural markup elements][info:org#Structural markup elements]] ([[http://orgmode.org/org.html#Markup][The Org Manual - Markup Syntax]])
- Clock table info [[info:org#The clock table][info:org#The clock table]]
- Exporting Options: [[info:org#Export Settings][info:org#Export Settings]]

*** HTML Tag to Org link find replace:

#+begin_src text
  s/<a href="\([^"]+\)">\([^<]+\)<\/a>/[[\1][\2]]
#+end_src

** use-package org

#+begin_src emacs-lisp
  (use-package org
    :commands org-mode
    :init
    (setq org-default-notes-file "~/org/todo.org")

    (setq org-ellipsis " ▽ ")
    ;; UTF-8 Ellipsis Chars ≫ ↩ • ◐ ▪ ► ■ □ ▢ …
    ;; PragmataPro Chars ☇ ⌔ ⇣ ⍖ ⭿ ❯ ⍢ ⊽ ∨ ▼ ▽ ╲╱ ⬇
    ;;   Double width    ⤑ ⮷ ⮒ ⮐ ⭸ ↲ ↴ ⬎ ﹀

    ;; (setq org-display-internal-link-with-indirect-buffer t)

    ;; Open file links in the same buffer
    (setq
     org-link-frame-setup '((vm . vm-visit-folder-other-frame)
                            (vm-imap . vm-visit-imap-folder-other-frame)
                            ;; (gnus . org-gnus-no-new-news)
                            (file . find-file)
                            ;; (file . find-file-other-window)
                            (wl . wl-other-frame)))


    ;; Square Bullets
    ;; (setq org-bullets-bullet-list (quote ("■" "■" "■" "■" "■" "■" "■" "■")))
    ;; Roman Numeral Bullets
    ;; (setq org-bullets-bullet-list (quote ("Ⅰ" "Ⅱ" "Ⅲ" "Ⅳ" "Ⅴ" "Ⅵ" "Ⅶ" "Ⅷ" "Ⅸ" "Ⅹ" "Ⅺ" "Ⅻ")))
    ;; Nubered Circle Dingbat Bullets
    ;; (setq org-bullets-bullet-list (quote ("❶" "❷" "❸" "❹" "❺" "❻" "❼" "❽" "❾" "❿")))
    ;; (setq org-bullets-bullet-list (quote ("➀" "➁" "➂" "➃" "➄" "➅" "➆" "➇" "➈" "➉")))
    ;; (setq org-bullets-bullet-list (quote ("" "" "" "" "" "" "" "" "" "")))
    ;;               
    ;; (setq org-bullets-bullet-list (quote ("◳" "◲" "◱" "◰" "◷" "◶" "◵" "◴" "◹" "◺" "◿" "◸")))

    (setq org-hide-leading-stars t) ;; can be used instead of org-bullets

    (setq org-catch-invisible-edits 'show)
    (setq org-blank-before-new-entry '((heading . t) (plain-list-item . t)))
    (setq org-src-window-setup 'current-window
          org-src-fontify-natively t)
    (setq org-fontify-whole-heading-line t
          org-fontify-done-headline t
          org-fontify-quote-and-verse-blocks t)
    (setq org-display-inline-images t)
    (setq org-todo-keywords '((sequence "TODO" "DOING" "WAITING" "DONE")))

    ;; (setq org-priority-regexp ".*?\\(\\[P\\([A-Z0-9]\\)\\] ?\\)")

    (defun amd/org-todo-or-checkbox ()
      (interactive)
      (if (org-at-item-checkbox-p) (org-toggle-checkbox) (org-todo)))
    (defun amd/org-next-visible-heading-and-recenter ()
      (interactive)
      (call-interactively 'org-next-visible-heading) (recenter))
    (defun amd/org-previous-visible-heading-and-recenter ()
      (interactive)
      (call-interactively 'org-previous-visible-heading) (recenter))

    :general
    (:states '(normal)
     :keymaps '(org-mode-map)
      "N" 'amd/org-next-visible-heading-and-recenter
      "E" 'amd/org-previous-visible-heading-and-recenter
      "L" 'org-forward-heading-same-level
      "H" 'org-backward-heading-same-level
      "X" 'amd/org-todo-or-checkbox
      "o" 'evil-open-below
      "O" '(lambda () (interactive) (amd/org-bol-call 'org-meta-return))
      "RET" 'org-open-at-point
      "^" 'org-beginning-of-line
      "$" 'org-end-of-line
      "<" 'org-shiftmetaleft
      ">" 'org-shiftmetaright
      "M-H" 'org-metaleft
      "M-L" 'org-metaright
      "M-N" 'org-metadown
      "M-E" 'org-metaup
      "-" 'org-cycle-list-bullet
      "<tab>" 'org-cycle
      "f" 'ace-link-org)
    (:states '(insert)
     :keymaps '(org-mode-map)
      ;; Use yankpad instead
      ;; "C-b" 'amd/org-insert-code-block
      "M-H" 'org-metaleft
      "M-L" 'org-metaright
      "M-N" 'org-metadown
      "M-E" 'org-metaup)

    :config
    ;; (evil-define-minor-mode-key 'normal 'org-src-mode (kbd "C-s") 'org-edit-src-save)
    ;; (evil-define-minor-mode-key 'insert 'org-src-mode (kbd "C-s") (lambda() (interactive) (org-edit-src-save) (evil-normal-state)))

    (defun amd/org-eol-call (fun)
      "Go to end of line and call provided function. FUN function callback"
      (end-of-line)
      (funcall fun)
      (evil-append nil))

    (defun amd/org-bol-call (fun)
      "Go to end of line and call provided function. FUN function callback"
      (beginning-of-line)
      (funcall fun)
      (evil-append nil))

    (add-to-list 'org-agenda-files org-default-notes-file)

    ;; Add all ~/org/*.org files to 'org-agenda-files
    (if (file-exists-p "~/org/")
        (cl-loop for org-file-name in (directory-files "~/org/" nil ".*\.org$")
                 do (add-to-list 'org-agenda-files
                                 (concat "~/org/" org-file-name))))

    ;; prettify-symbols-mode only operates on strings
    ;; (add-hook 'org-mode-hook 'prettify-symbols-mode)
    ;; (add-hook 'org-mode-hook (lambda () (push '((regexp-quote "^**") . " *") prettify-symbols-alist)))

    ;; #+STARTUP: odd
    ;; #+STARTUP: indent
    ;; #+STARTUP: hidestars
    ;; (add-hook 'org-mode-hook 'org-superstar-mode)

    (add-hook 'org-mode-hook 'flyspell-mode)
    ;; (add-hook 'org-mode-hook 'pandoc-mode)

    ;; Org Completion
    (add-hook 'org-mode-hook (lambda () (company-mode -1)))
    (add-hook 'org-mode-hook
              (lambda ()
                (setq completion-at-point-functions
                      '(org-completion-symbols
                        ora-cap-filesystem
                        org-completion-refs))))

    ;; ;; Evil C-p
    ;; evil-complete-previous-func
    ;; evil-complete-previous-line-func
    ;; evil-complete-previous-minibuffer-func

    ;; ;; Evil C-n
    ;; evil-complete-next-func
    ;; evil-complete-next-line-func
    ;; evil-complete-next-minibuffer-func

    (defun org-completion-symbols ()
      (when (looking-back "=[a-zA-Z]+")
        (let (cands)
          (save-match-data
            (save-excursion
              (goto-char (point-min))
              (while (re-search-forward "=\\([a-zA-Z]+\\)=" nil t)
                (cl-pushnew
                 (match-string-no-properties 0) cands :test 'equal))
              cands))
          (when cands
            (list (match-beginning 0) (match-end 0) cands)))))

    (defun ora-cap-filesystem ()
      (let (path)
        (when (setq path (ffap-string-at-point))
          (let ((compl
                 (all-completions path #'read-file-name-internal)))
            (when compl
              (let ((offset (ivy-completion-common-length (car compl))))
                (list (- (point) offset) (point) compl)))))))

    (defun org-completion-refs ()
      (when (looking-back "\\\\\\(?:ref\\|label\\){\\([^\n{}]\\)*")
        (let (cands beg end)
          (save-excursion
            (goto-char (point-min))
            (while (re-search-forward "\\label{\\([^}]+\\)}" nil t)
              (push (match-string-no-properties 1) cands)))
          (save-excursion
            (up-list)
            (setq end (1- (point)))
            (backward-list)
            (setq beg (1+ (point))))
          (list beg end
                (delete (buffer-substring-no-properties beg end)
                        (nreverse cands))))))

    (defun amd/use-default-paragraph-delimiters ()
      (setq paragraph-start (default-value 'paragraph-start)
            paragraph-separate (default-value 'paragraph-separate)))
    (add-hook 'org-mode-hook 'amd/use-default-paragraph-delimiters)

    ;; Don't really need our own minor mode to make evil keybindings
    ;; (define-minor-mode evil-org-mode
    ;;   "Buffer local minor mode for evil-org"
    ;;   :init-value nil
    ;;   ;; :lighter " EvilOrg"
    ;;   :keymap (make-sparse-keymap) ; defines evil-org-mode-map
    ;;   :group 'evil-org)
    ;; (add-hook 'org-mode-hook 'evil-org-mode) ;; only load with org-mode

    (add-hook 'org-mode-hook
              (lambda ()
                (define-key evil-inner-text-objects-map "h" #'er/mark-org-parent)
                (define-key evil-inner-text-objects-map "c" #'er/mark-org-code-block)
                (setq evil-want-fine-undo 'yes)))

    (add-hook 'org-mode-hook
              (lambda ()
                (add-to-list (make-local-variable 'company-backends)
                             'company-ispell)))

    ;; (advice-add 'org-next-visible-heading :after #'recenter) ;; this doesn't work with recenter?
    ;; (advice-add 'org-previous-visible-heading :after #'recenter) ;; this doesn't work with recenter?

    ;; not working with org-archive-subtree
    ;; (defadvice org-next-visible-heading (after advice-for-org-next-visible-heading activate) (recenter))
    ;; (defadvice org-previous-visible-heading (after advice-for-org-previous-visible-heading activate) (recenter))

    (defadvice org-forward-heading-same-level (after advice-for-org-forward-heading-same-level activate) (recenter))
    (defadvice org-backward-heading-same-level (after advice-for-org-backward-heading-same-level activate) (recenter))

    ;; ;; rebind some existing org-mode maps
    ;; (mapc
    ;;  (lambda (state)
    ;;    (evil-define-key state org-mode-map
    ;;      (kbd "M-e") (lambda () (interactive) (tmux-window-navigation/move-up))   ;; was org-forward-sentence
    ;;      (kbd "M-h") (lambda () (interactive) (tmux-window-navigation/move-left)) ;; was org-mark-element
    ;;    ))
    ;;  '(normal insert))

    (org-babel-do-load-languages
     'org-babel-load-languages
     '((shell . t)
       (python . t)
       (ruby . t)
       (ditaa . t)
       (sqlite . t)
       (perl . t)
       (emacs-lisp . t)
       (dot . t)
       (gnuplot . t)
       ))

    (setq org-babel-ruby-command "~/.rbenv/shims/ruby")

    (defun amd/clipboard-org-buffer-to-html-xclip ()
      "Use ox-html export and copy results to the clipboard as HTML"
      (interactive)
      ;; (let ((output-filename (org-html-export-to-html)))
      ;;   (shell-command
      ;;    (format "cat %s | xclip -selection clipboard -i -t text/html &> /dev/null" output-filename))
      ;; )
      (let ((output-buffer (org-html-export-as-html)))
        (switch-to-buffer output-buffer)
        (shell-command-on-region
         1 (point-max)
         "xclip -selection clipboard -i -t text/html &> /dev/null")
        (delete-window))
      (recenter)
      (evil-normal-state))


    (defun amd/clipboard-html-to-org-pandoc-mac ()
      "Convert clipboard contents from HTML to Org and then paste (yank)."
      (interactive)
      (kill-new (shell-command-to-string "osascript -e 'the clipboard as \"HTML\"' | ruby -ne 'puts([$_[10..-3]].pack(\"H*\"))' | pandoc -f html -t org"))
      (yank))

    (defun amd/clipboard-html-to-org-pandoc-linux ()
      "Convert clipboard contents from HTML to Org and then paste (yank)."
      (interactive)
      (kill-new (shell-command-to-string "xclip -selection clipboard -o -t text/html | pandoc -f html -t org"))
      (yank))

    (defun amd/clipboard-org-to-html-mac ()
      "Convert the org buffer to html and put it on the clipboard."
      (interactive)
      (let* ((html-output-buffer (org-html-export-as-html)))
        (switch-to-buffer
         html-output-buffer
         (let ((hex-encoded-string
                (cl-loop for line in (string-to-list (buffer-string))
                         concat (format "%02X" line))))
           (message
            (shell-command-to-string
             (concat "osascript -e \"set the clipboard to «data HTML" hex-encoded-string "»\"")))))
        (delete-window)))

    (defun org-agenda-cts ()
      (let ((args (get-text-property
                   (min (1- (point-max)) (point))
                   'org-last-args)))
        (nth 2 args)))

    (defhydra hydra-org-agenda-view (:hint none)
      "
  _d_: ?d? day        _g_: time grid=?g? _a_: arch-trees
  _w_: ?w? week       _[_: inactive      _A_: arch-files
  _t_: ?t? fortnight  _f_: follow=?f?    _r_: report=?r?
  _m_: ?m? month      _e_: entry =?e?    _D_: diary=?D?
  _y_: ?y? year       _q_: quit          _L__l__c_: ?l?
  "
      ("SPC" org-agenda-reset-view)
      ("d" org-agenda-day-view
       (if (eq 'day (org-agenda-cts))
           "[x]" "[ ]"))
      ("w" org-agenda-week-view
       (if (eq 'week (org-agenda-cts))
           "[x]" "[ ]"))
      ("t" org-agenda-fortnight-view
       (if (eq 'fortnight (org-agenda-cts))
           "[x]" "[ ]"))
      ("m" org-agenda-month-view
       (if (eq 'month (org-agenda-cts)) "[x]" "[ ]"))
      ("y" org-agenda-year-view
       (if (eq 'year (org-agenda-cts)) "[x]" "[ ]"))
      ("l" org-agenda-log-mode
       (format "% -3S" org-agenda-show-log))
      ("L" (org-agenda-log-mode '(4)))
      ("c" (org-agenda-log-mode 'clockcheck))
      ("f" org-agenda-follow-mode
       (format "% -3S" org-agenda-follow-mode))
      ("a" org-agenda-archives-mode)
      ("A" (org-agenda-archives-mode 'files))
      ("r" org-agenda-clockreport-mode
       (format "% -3S" org-agenda-clockreport-mode))
      ("e" org-agenda-entry-text-mode
       (format "% -3S" org-agenda-entry-text-mode))
      ("g" org-agenda-toggle-time-grid
       (format "% -3S" org-agenda-use-time-grid))
      ("D" org-agenda-toggle-diary
       (format "% -3S" org-agenda-include-diary))
      ("!" org-agenda-toggle-deadlines)
      ("["
       (let ((org-agenda-include-inactive-timestamps t))
         (org-agenda-check-type t 'timeline 'agenda)
         (org-agenda-redo)))
      ("q" (message "Abort") :exit t))

    (add-hook 'org-agenda-mode-hook (lambda () (define-key org-agenda-mode-map "v" 'hydra-org-agenda-view/body)))

    (defun amd/org-insert-code-block ()
      (interactive)
      ;; For org version < 9.2
      ;; (org-complete-expand-structure-template
      ;;  (point)
      ;;  (--first (equal (car it) "s") org-structure-template-alist))
      ;; For org version >= 9.2
      (org-insert-structure-template "src")))
#+end_src

*** Easy Templates

Typing ~<s~ followed by ~TAB~ will expand blocks.

Supported Types: [[info:org#Easy%20templates][info:org#Easy templates]] ([[http://orgmode.org/org.html#Easy-templates][The Org Manual - Easy Templates]])

** org exports

#+begin_src emacs-lisp
  (use-package ox-html
    :after org
    :custom
    (org-html-html5-fancy t))

  (use-package ox
    :after org
    :init
    (defun amd/org-export-html-wrap-src-blocks-in-tables (text backend info)
      "Add ``` to the beginning and end of src blocks."
      (when (org-export-derived-backend-p backend 'html)
        (with-temp-buffer
          (insert text)
          (goto-char (point-min))
          ;; find starting <pre> tag
          (re-search-forward "<pre class=\"src src-[^\"]*\">")
          ;; start a table tag
          (insert "<table class=\"kodify\"><tbody><tr><td>")
          ;; find the end </pre> tag
          (search-forward "\n</pre>")
          ;; delete the \n before the </pre> tag
          (goto-char (match-beginning 0))
          (delete-char 1)
          ;; close the table tag
          (search-forward "</pre>")
          (insert "</td></tr></tbody></table>")
          (buffer-string))))
    :config
    (add-to-list 'org-export-filter-src-block-functions 'amd/org-export-html-wrap-src-blocks-in-tables))

  (use-package ox-gfm
    :after ox)
#+end_src

** org-capture

- [[info:org#Capture%20templates][info:org#Capture templates]]
- [[info:org#Template%20expansion][info:org#Template expansion]]

#+begin_src emacs-lisp
  (use-package org-capture
    :after org
    :config
    (setq org-capture-templates
          `(("b"
             ,(format "  ~/dot-all/bookmarks.org & selected text")
             entry (file+olp+datetree "~/dot-all/bookmarks.org" "Bookmarks")
             "* %U %a\n  %i\n"
             :empty-lines 1)

            ("t" ,(format " Tasks"))

            ("th"
             ,(format "  headline w/ date+link & selected text")
             entry (file+headline org-default-notes-file "Inbox")
             "* %?\n  Source: %u %a\n\n  %i\n"
             :empty-lines 1)

            ("tc"
             ,(format
               "  code w/ date+link")
             entry (file+headline org-default-notes-file "Inbox")
             "* %^{Title}%?\n  Source: %u %a\n\n  #+begin_src %^{language}\n    %i\n  #+end_src\n"
             :empty-lines 1)

            ("tt"
             ,(format "  TODO")
             entry (file+headline org-default-notes-file "Inbox")
             "* TODO %?\n  SCHEDULED: %t\n  %a\n\n  %i\n")
            ))
    (add-hook 'org-capture-mode-hook 'evil-insert-state))
#+end_src

** kanban.el

#+begin_src emacs-lisp
  (use-package kanban
    :after org
    :init
    (setq kanban-max-column-width 80))
#+end_src

** toc-org

#+begin_src emacs-lisp
  (use-package toc-org
    :after org
    :config
    (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** org-protocol

#+begin_src emacs-lisp
  (use-package org-protocol
    :after org)
#+end_src

*** Chrome bookmarks

**** org-capture

#+begin_src fundamental :tangle no
  javascript:location.href = 'org-protocol://capture?url=' + encodeURIComponent(location.href) + '&title=' + encodeURIComponent(document.title) + '&body=' + encodeURIComponent(window.getSelection());
#+end_src

**** org-store-link

#+begin_src fundamental :tangle no
  javascript:location.href = 'org-protocol://store-link?url='+encodeURIComponent(location.href)+'&title='+encodeURIComponent(document.title);
#+end_src

**** =emacs.desktop=

#+NAME: homedir
#+begin_src emacs-lisp :cache yes
  (expand-file-name "~")
#+end_src

#+begin_src fundamental :tangle (if (eq system-type 'gnu/linux) "~/.local/share/applications/emacs.desktop" "no") :noweb tangle
  [Desktop Entry]
  Name=Emacs
  Exec=<<homedir()>>/apps/emacs/bin/emacs
  Type=Application
  Terminal=false
  Categories=System;
  Icon=emacs.svg
  Comment=
#+end_src

**** =org-protocol.desktop=

#+begin_src fundamental :tangle (if (eq system-type 'gnu/linux) "~/.local/share/applications/org-protocol.desktop" "no")
  [Desktop Entry]
  Name=org-protocol
  Exec=<<homedir()>>/apps/emacs/bin/emacsclient -n %u
  Type=Application
  Terminal=false
  Categories=System;
  MimeType=x-scheme-handler/org-protocol
  Icon=emacs.svg
  Comment=
#+end_src

**** xdg-mime

#+begin_src sh :tangle no
  xdg-mime default org-protocol.desktop x-scheme-handler/org-protocol
#+end_src

*** Org 9 New Style Links

New org-protocol key=value syntax

Org-protocol can now handle query-style parameters such as:

org-protocol://store-link?url=http:%2F%2Flocalhost%2Findex.html&title=The%20title
org-protocol://capture?template=x&title=Hello&body=World&url=http:%2F%2Fexample.com

Old-style links such as

org-protocol://store-link:/http:%2F%2Flocalhost%2Findex.html/The%20title
continue to be supported.

If you have defined your own handler functions for org-protocol-protocol-alist,
change them to accept either a property list (for new-style links) or a string
(for old-style links). Use org-protocol-parse-parameters to convert old-style
links into property lists.

*** Mac OS Setup

[[http://orgmode.org/worg/org-contrib/org-protocol.html#orgheadline6][org-protocol.el – Mac OS X setup]] doesn't work anymore according to [[https://github.com/neil-smithline-elisp/EmacsClient.app/issues/3][Issue #3 · neil-smithline-elisp/EmacsClient.app]].

**** Step 1. Create an application

- Launch the Script Editor application and create a new document
- Copy-and-paste the following code into the new document
- Change "/usr/local/bin/emacsclient" to path to =emacsclient= on your system
- Save it in /Application/ (not the default /Script/) File Format as
  =org-protocol.app=

#+begin_src fundamental :tangle no
  on open location this_URL
    do shell script "/Applications/Emacs.app/Contents/MacOS/bin/emacsclient \"" & this_URL & "\""
  end open location
#+end_src

**** Step 2. Configure the application

- Navigate to the application (i.e., =org-protocol.app=) in the Finder, then
  right-click on it and select =Show Package Contents=. Now go into the
  =Contents= folder and open =Info.plist=
- Add the following code to the file, making sure to keep all existing
  key/string pairs intact:

#+begin_src fundamental :tangle no
  <key>CFBundleURLTypes</key>
  <array>
    <dict>
      <key>CFBundleURLName</key>
      <string>org-protocol handler</string>
      <key>CFBundleURLSchemes</key>
      <array>
        <string>org-protocol</string>
      </array>
    </dict>
  </array>
#+end_src

**** Notes

***** Emacs doesn't activate?

#+begin_src fundamental :tangle no
  on open location this_URL
    do shell script "/Applications/Emacs.app/Contents/MacOS/bin/emacsclient \"" & this_URL & "\" && open -a Emacs"
  end open location
#+end_src

* elisp links

[[info:elisp#Prefix%20Command%20Arguments][info:elisp#Prefix Command Arguments]]

* edit-with-emacs and cvim

Chrome browser extensions:
- [[https://chrome.google.com/webstore/detail/edit-with-emacs/ljobjlafonikaiipfkggjbhkghgicgoh][Edit with Emacs]]
- [[https://chrome.google.com/webstore/detail/cvim/ihlenndgcmojhcghmfjfneahoeklbjjh?hl=en][cvim]]

=amd/parse-json= will make this plugin work with [[https://chrome.google.com/webstore/detail/cvim/ihlenndgcmojhcghmfjfneahoeklbjjh?hl=en][cvim]].
cvim sends a json payload to the edit server instead of the raw text.

#+begin_src emacs-lisp
  (use-package edit-server
    :commands (edit-server-start)
    :init
    (setq edit-server-port 3000)
    (defun amd/parse-json ()
      (interactive)
      (goto-char (point-min))
      (let ((parsed-json (json-read)))
        (erase-buffer)
        (insert (alist-get 'data parsed-json))))
    (add-hook 'edit-server-edit-mode-hook #'amd/parse-json))
#+end_src

* view large files

#+begin_src emacs-lisp
  (use-package vlf-setup)
#+end_src

* emacs and git on windows

Installing emacs and git without using cygwin

- https://sourceforge.net/projects/emacsbinw64/
- https://git-scm.com/download/win
- http://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html (optional)

Download above portable versions and extract to

- =C:\Users\anthony\emacs=
- =C:\Users\anthony\PortableGit=
- =C:\Users\anthony\PortableGit\cmd= (plink goes here)

Launch emacs with this bat file.

#+begin_src fundamental :tangle (if (eq system-type 'windows-nt) "C:/Users/anthony/runemacs.bat" "no")
  SET GIT=PortableGit
  SET GIT_HOME=%CD%\%GIT%
  SET GIT_ASKPASS=git-gui--askpass
  SET SSH_ASKPASS=git-gui--askpass
  SET PATH=%GIT_HOME%\bin;%GIT_HOME%\mingw64\bin;%GIT_HOME%\cmd;%GIT_HOME%\usr\bin;%GIT_HOME%\mingw64\libexec\git-core;%PATH%
  SET HOME=.\
  emacs\bin\runemacs.exe %*
#+end_src

More info here https://github.com/magit/magit/wiki/Pushing-with-Magit-from-Windows

With the above this isn't necessary.

#+begin_src emacs-lisp :tangle no
  (when (eq system-type 'windows-nt)
    (add-to-list 'exec-path "C:\\Users\\anthony\\PortableGit\\bin"))
#+end_src

* tramp

#+begin_src emacs-lisp
  (use-package tramp
    :defer t
    :init
    (setq enable-remote-dir-locals t)
    ;; (setq tramp-verbose 6)
    ;; (getenv "GIT_SSH")
    ;; (shell-command-to-string (concat (getenv "GIT_SSH") " -V"))

    (if (eq system-type 'windows-nt)
        (progn
          (setenv "GIT_SSH" "C:\\Users\\anthony\\PortableGit\\cmd\\plink.exe")
          (setq tramp-default-method "plink"))
      (setq tramp-default-method "ssh"))

    (defun sudo-edit-current-file ()
      (interactive)
      (let ((position (point)))
        (find-alternate-file
         (if (file-remote-p (buffer-file-name))
             (let ((vec (tramp-dissect-file-name (buffer-file-name))))
               (tramp-make-tramp-file-name
                "sudo"
                (tramp-file-name-user vec)
                (tramp-file-name-host vec)
                (tramp-file-name-localname vec)))
           (concat "/sudo:root@localhost:" (buffer-file-name))))
        (goto-char position))))
#+end_src

* screencast

#+begin_src emacs-lisp
  (use-package gif-screencast
    :commands gif-screencast-start-or-stop
    :config
    (global-set-key (kbd "<f9>") 'gif-screencast-start-or-stop))
#+end_src

#+begin_src emacs-lisp
  (use-package escr
   :load-path "escr")
#+end_src

