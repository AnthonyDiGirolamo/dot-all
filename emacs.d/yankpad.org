* org-mode

** ti: title                                                            :src:
   #+begin_src org
     ,#+TITLE: $1
     ,#+AUTHOR: $2
     ,#+EMAIL: $3
     ,#+LANGUAGE: en
     ,#+OPTIONS: title:nil toc:nil H:4 num:nil ^:nil ':nil
     ,#+OPTIONS: html-style:nil html-preamble:t html-postamble:nil
     ,#+HTML_DOCTYPE: html5
     ,#+HTML_HEAD: <link href="https://fonts.googleapis.com/css?family=Roboto|Roboto+Mono" rel="stylesheet">
     ,#+HTML_HEAD: <link rel="stylesheet" href="styles/material.blue-indigo.min.css">
     ,#+HTML_HEAD: <link rel="stylesheet" href="styles/material_style.css">
     ,#+HTML_HEAD: <script defer src="styles/material.min.js"></script>
     ,#+PROPERTY: UNNUMBERED t
     $0
   #+end_src

** s: src-block
   #+begin_src $1
   $0
   #+end_src
** se: src-block emacs-lisp
   #+begin_src emacs-lisp
   $0
   #+end_src
** ta: org-mode table
   | $0 |  |
   |--+--|
   |  |  |

* python-mode

** rc: regex_compile
    menu_regex = re.compile(
        r'^menu\.' # starts with "menu"
        r'(?P<menu_option_name>[^.]+)\.' # first token after .
        r'(?P<menu_option_value>[^.]+)$', re.MULTILINE) # second (final) token after .

** rm: regex.match
    mmatch = self.menu_regex.match(moption)
    if menu_match:
        whole_match_string = mmatch[0]
        first_group_matc_stringh = mmatch[1]
        mmatch = menu_match.groupdict()
        name = mmgd["menu_option_name"]
        value = mmgd["menu_option_value"]

** commandline.docopt boilerplate
   #!/usr/bin/env python3
   # coding=utf-8

   """mkscript

   Usage:
     mkscript [--directory NAME]
     mkscript (-h | --help)
     mkscript --version

   Options:
     -d NAME --directory=NAME  Directory name [default: build]
     -h --help                 Show this screen.
     --version                 Show version.
   """

   import os
   import pprint
   import re
   import string
   import sys
   from docopt import docopt

   pp = pprint.PrettyPrinter(indent=4, width=110).pprint

   def main():
       # Parse command line with docopt
       arguments = docopt(__doc__, version=1)
       pp(arguments)
       os.system("pwd")        # Run command with no interaction
       pp(os.environ["HOME"])  # Environment variable
       pp(__file__)            # This script location
       pp(os.getcwd())         # Current working directory
       os.chdir(os.path.dirname(__file__))  # Change directory
       exit(0)


   if __name__ == '__main__':
       main()


** file.readlines boilerplate
   #!/usr/bin/env python3
   # coding=utf-8

   import pprint
   import re
   import sys
   from datetime import datetime, date, time
   pp = pprint.PrettyPrinter(indent=4).pprint

   def main():
     some_regex = re.compile(r'\n\n')

     with open(sys.argv[1], "r") as somefile:
       for index, line in enumerate(somefile.readlines()):
         pass

   if __name__ == '__main__':
     main()
