#+TITLE: fish
#+STARTUP: content indent
#+PROPERTY: header-args :mkdirp yes

* Table of Contents                                                     :TOC:
- [[#configfishconfigfish][~/.config/fish/config.fish]]
- [[#configfishconfdaliasesfish][~/.config/fish/conf.d/aliases.fish]]
- [[#configfishconfdfish_user_key_bindingsfish][~/.config/fish/conf.d/fish_user_key_bindings.fish]]
- [[#prompt][prompt]]
  - [[#configfishfunctionsfish_promptfish][~/.config/fish/functions/fish_prompt.fish]]
  - [[#configfishfunctionsfish_mode_promptfish][~/.config/fish/functions/fish_mode_prompt.fish]]
- [[#directory-navigation][directory navigation]]
  - [[#configfishfunctionstarxzfish][~/.config/fish/functions/tarxz.fish]]
  - [[#configfishfunctionsufish][~/.config/fish/functions/u.fish]]
  - [[#configfishfunctionsdlfish][~/.config/fish/functions/dl.fish]]
- [[#ssh][ssh]]
  - [[#configfishfunctionsauthmefish][~/.config/fish/functions/authme.fish]]
- [[#bash-releated][bash releated]]
  - [[#configfishfunctionssource-bash-aliasesfish][~/.config/fish/functions/source-bash-aliases.fish]]
- [[#completions][completions]]
  - [[#configfishcompletionsdhcpcd-restartfish][~/.config/fish/completions/dhcpcd-restart.fish]]

* ~/.config/fish/config.fish

#+begin_src fish :tangle "~/.config/fish/config.fish"
  # set tmux pane title based on currently running command
  function fish_title
    true
  end

  if set -q INSIDE_EMACS
    # disable vim keybindings if running fish inside emacs M-x shell
    fish_default_key_bindings
  else
    fish_vi_key_bindings
  end

  function add_directory_to_path --argument-names new_dir
    if test -d $new_dir
      fish_add_path --move --path $new_dir
      # set -x PATH $new_dir $PATH
    end
  end

  # Prepend PATH variable
  add_directory_to_path $HOME/apps/bin
  add_directory_to_path $HOME/Android/Sdk/platform-tools
  add_directory_to_path $HOME/apps/fish/bin
  add_directory_to_path $HOME/apps/emacs/bin

  add_directory_to_path $HOME/dot-all/bin
  add_directory_to_path $HOME/dot-all/awkpath
  set -x AWKPATH $HOME/dot-all/awkpath

  add_directory_to_path /usr/local/go/bin
  if not set -q VIRTUAL_ENV
    add_directory_to_path $HOME/.local/bin
  end
  add_directory_to_path $HOME/.cargo/bin
  add_directory_to_path $HOME/.npm-packages/bin
  add_directory_to_path $HOME/.rbenv/bin

  if status --is-interactive ; and test -d $HOME/.pyenv
      set -x PYENV_ROOT $HOME/.pyenv
      add_directory_to_path $PYENV_ROOT/bin
      if command -v pyenv 1>/dev/null 2>&1
          pyenv init - | source
          pyenv virtualenv-init - | source
      end
  end

  # lua and luarocks
  add_directory_to_path $HOME/apps/lua/bin
  if which luarocks 1>/dev/null 2>/dev/null
    add_directory_to_path $HOME/.luarocks/bin
    if status is-interactive
      for line in (luarocks path --no-bin | sed -e 's/^export /set -x /' -e 's/=\'/ \'/')
        eval $line
      end
    end
  end

  # This breaks some scripts
  # set -x SHELL fish

  # Example of using emacsclient as EDITOR
  # if which emacsclient 1>/dev/null
  #   if test -z $DISPLAY
  #       # no display
  #       set -x EDITOR "emacsclient --alternate-editor='' -nw"
  #   else
  #       # display set
  #       set -x EDITOR "emacsclient --alternate-editor='' --no-wait --create-frame"
  #   end
  # end

  # Use Vim as $EDITOR it's faster to load
  set -x EDITOR "vim"
  set -x VISUAL $EDITOR
  if not set -q INSIDE_EMACS
    # set -x TERM xterm-24bits
    set -x TERM xterm-256color
  end
  # set -x MANPAGER "sh -c \"sed -e 's/.//g' | vim -c 'set ft=man ts=8 nomod nolist nonu nornu noma' -\""
  set -x MANPAGER "vim -M +MANPAGER '+set nonumber' -"

  # if ~/.config/fish/config-local.fish exists, load it
  set config_local $HOME/.config/fish/config-local.fish
  test -f $config_local; and source $config_local

  function fish_greeting
    # if status is-interactive
    #   if which lua 1>/dev/null 2>/dev/null
    #     if test -f $HOME/dot-all/bin/ship.lua
    #       $HOME/dot-all/bin/ship.lua
    #     end
    #   end
    # end
  end

  # Dracula Colorscheme
  set -U fish_color_normal normal
  set -U fish_color_command F8F8F2
  set -U fish_color_quote F1FA8C
  set -U fish_color_redirection 8BE9FD
  set -U fish_color_end 50FA7B
  set -U fish_color_error FFB86C
  set -U fish_color_param FF79C6
  set -U fish_color_comment 6272A4
  set -U fish_color_match --background=brblue
  set -U fish_color_selection white --bold --background=brblack
  set -U fish_color_search_match bryellow --background=brblack
  set -U fish_color_history_current --bold
  set -U fish_color_operator 00a6b2
  set -U fish_color_escape 00a6b2
  set -U fish_color_cwd green
  set -U fish_color_cwd_root red
  set -U fish_color_valid_path --underline
  set -U fish_color_autosuggestion BD93F9
  set -U fish_color_user brgreen
  set -U fish_color_host normal
  set -U fish_color_cancel -r
  set -U fish_pager_color_completion normal
  set -U fish_pager_color_description B3A06D yellow
  set -U fish_pager_color_prefix white --bold --underline
  set -U fish_pager_color_progress brwhite --background=cyan
#+end_src

* ~/.config/fish/conf.d/aliases.fish

#+begin_src fish :tangle "~/.config/fish/conf.d/aliases.fish"
  alias lltr='ll -tr'
  alias llsr='ll -Sr'
  alias lla='ls -lha'
  alias ll='ls -lh'
  alias la='ls -a'
  alias l='ls -CF'

  alias gll='git log --abbrev-commit --graph --decorate --date=relative --all --pretty=format:\'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset\''
  alias gllo='git log --abbrev-commit --graph --decorate --date=relative --pretty=format:\'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset\''
  alias gs='git status'
  alias ga='git add'
  alias gb='git branch'
  alias gc='git commit'
  alias gca='git commit -a'
  alias gwd='git diff'
  alias gwdc='git diff --cached'
  alias gp='git pull'
  alias gpr='git pull --recurse-submodules'
  alias gpp='git push'
  alias gco='git checkout'

  # tree "ls -l" style output
  function tllll --description "tree ls -l style"
    tree -C -apuhgsD $argv | sed -e 's/^\(.*\) \[\(.*\)\] \(.*\)/\2 \1\3/'
  end
  function tll --description "tree ls -l style with maxdepth of 2"
    tllll -L 2 $argv
  end
  function tlll --description "tree ls -l style with maxdepth of 3"
    tllll -L 3 $argv
  end
  function tll4 --description "tree ls -l style with maxdepth of 4"
    tllll -L 4 $argv
  end

  # fish specific aliases
  alias o=prevd
  alias pd=prevd
  alias nd=nextd

  function h --description "merge history from other sessions and display with less"
    history --merge
    history
  end

  function setgitauthor
    git config user.name "AnthonyDiGirolamo"
    git config user.email "anthony.digirolamo@gmail.com"
  end

  alias v='vim'
  alias tmux='tmux -2'

  # emacs aliases
  # if string match -q -r 'Darwin' (uname -a)
  #   alias emacs='/Applications/Emacs.app/Contents/MacOS/Emacs'
  # end
  alias e="env TERM=xterm-24bits emacs -nw"
  function eg
    env TERM=xterm-24bits emacs &
  end

  # alias ed="emacs --daemon"
  alias ec="env TERM=xterm-24bits emacsclient --alternate-editor='' -nw"
  alias ecg="env TERM=xterm-24bits emacsclient --alternate-editor='' --no-wait --create-frame"
  alias einterrupt="kill -USR2 (ps -o pid= -C emacs|head -n 1)"
#+end_src

* ~/.config/fish/conf.d/fish_user_key_bindings.fish

#+begin_src fish :tangle "~/.config/fish/conf.d/fish_user_key_bindings.fish"
  # This function is auto-run by fish, use it to override keybindings
  function fish_user_key_bindings
    # Default Bindings
    #   Alt+Up or Down to move through last argument history
    #   Alt+Left or Right to move through dirhist

    # Alt+Ctrl+n or e to move through last argument history
    bind \e\cn history-token-search-forward
    bind \e\ce history-token-search-backward
    bind -M insert \e\cn history-token-search-forward
    bind -M insert \e\ce history-token-search-backward

    # Alt+Ctrl+h or l to move through dirhist
    bind \e\ch prevd-or-backward-word
    bind \e\cl nextd-or-forward-word
    bind -M insert \e\ch prevd-or-backward-word
    bind -M insert \e\cl nextd-or-forward-word

    # Ctrl-e accept current completion
    bind -M insert \ce forward-char

    # Up arrow: sync history accross sessions before reverse history search
    bind -M insert -k up 'history --merge; up-or-search'
    bind -M insert \e\[A 'history --merge; up-or-search'

    # Also Use Ctrl-p and Ctrl-n for reverse history search
    bind -M insert \cp 'history --merge; up-or-search'
    bind -M insert \cn down-or-search

    # Interactive history search Ctrl-r insert mode (normally / in normal mode).
    bind -M insert \cr history-pager
  end
#+end_src

* prompt

** ~/.config/fish/functions/fish_prompt.fish

The =fish_prompt= function is responsible for setting the prompt.

#+begin_src fish :tangle "~/.config/fish/functions/fish_prompt.fish"
  set -x fish_color_history_current yellow

  # Prompt Setup
  # set using_android 0
  # if string match -q -r 'Android' (uname -a)
  #   set using_android 1
  # end

  set powerline_right_arrow 'î‚°'
  # set powerline_right_arrow ''
  if set -q INSIDE_EMACS; or set -q XTERM_VERSION; or string match -q -r 'raspberrypi|chip' $hostname
    set powerline_right_arrow ''
  end

  set powerline_insert 5f5fff
  set powerline_blue1 5f87ff
  set powerline_blue2 87afff
  set powerline_blue3 dfdfff
  set -x fish_custom_prompt_show_hostname 0
  set -x fish_custom_prompt_show_user 0

  function fish_prompt
    if set -q INSIDE_EMACS
      echo -n (prompt_pwd) ' $ '
      return
    end

    set_color -b $powerline_blue1 black
    if test 1 = $fish_custom_prompt_show_user
      printf ' %s' $USER
    end
    if test 1 = $fish_custom_prompt_show_hostname
      printf '@%s ' $hostname
    else
      printf '  '
    end

    set_color -b $powerline_blue2 $powerline_blue1
    echo -n $powerline_right_arrow

    set_color -b $powerline_blue2 black
    echo -n '' (prompt_pwd) ''

    if set branch (git rev-parse --abbrev-ref HEAD 2>/dev/null)
      set_color -b $powerline_blue3 $powerline_blue2
      echo -n $powerline_right_arrow

      set_color -b $powerline_blue3 black
      echo -n '' $branch ''

      set_color -b normal $powerline_blue3
      echo -n $powerline_right_arrow
    else
      set_color -b normal $powerline_blue2
      echo -n $powerline_right_arrow
    end

    echo -n ' '
    set_color normal
  end
#+end_src

** ~/.config/fish/functions/fish_mode_prompt.fish

The =fish_mode_prompt= formats the vi mode part of the prompt.
=fish_vi_key_bindings= must be enabled.

#+begin_src fish :tangle "~/.config/fish/functions/fish_mode_prompt.fish"
  # The fish_mode_prompt function is prepended to the prompt
  function fish_mode_prompt --description "Displays the current mode"
    # Do nothing if not in vi mode
    if test "$fish_key_bindings" = "fish_vi_key_bindings"
      switch $fish_bind_mode
        case default
          set_color --bold --background red white
          echo ' N '
          set_color --background $powerline_blue1 red
        case insert
          set_color --bold --background $powerline_insert white
          echo ' I '
          set_color --background $powerline_blue1 $powerline_insert
        case replace-one
          set_color --bold --background green white
          echo ' R '
          set_color --background $powerline_blue1 green
        case visual
          set_color --bold --background magenta white
          echo ' V '
          set_color --background $powerline_blue1 magenta
      end
      echo $powerline_right_arrow
    end
    set_color normal
  end
#+end_src

* directory navigation

** ~/.config/fish/functions/tarxz.fish

#+begin_src fish :tangle "~/.config/fish/functions/tarxz.fish"
  function tarxz --description "tar c DIR | xz -0 -T 0 > DIR.tar.xz"
    set dir_name $argv[1]
    tar c $dir_name | xz -0 -T 0 > "$dir_name.tar.xz"
  end
#+end_src

** ~/.config/fish/functions/u.fish

#+begin_src fish :tangle "~/.config/fish/functions/u.fish"
  function u --description "cd .. or up to a given directory"
    if test (count $argv) = 0
      cd ..
      return 0
    end

    set dir_name $argv[1]
    set d (string split "/$dir_name/" (pwd))
    if test (count $d) = 2
      cd "$d[1]/$dir_name"
      return 0
    else
      return 1
    end
  end

#+end_src

** ~/.config/fish/functions/dl.fish

#+begin_src fish :tangle "~/.config/fish/functions/dl.fish"
  function dl --description "always vertical dirh"
    for dir in $dirprev
      echo $dir
    end
    set_color cyan
    echo (pwd)
    set_color normal
    for dir in $dirnext
      echo $dir
    end
  end
#+end_src

* ssh

** ~/.config/fish/functions/authme.fish

#+begin_src fish :tangle "~/.config/fish/functions/authme.fish"
  function authme
      ssh $argv 'cat >>.ssh/authorized_keys' <~/.ssh/id_rsa.pub
  end
#+end_src

* bash releated

** ~/.config/fish/functions/source-bash-aliases.fish

#+begin_src fish :tangle "~/.config/fish/functions/source-bash-aliases.fish"
  # WIP: not all aliases work
  function source-bash-aliases --description "Try to source bash aliases"
    bash -i -c 'alias' > ~/.active_aliases
    for line in (cat ~/.active_aliases) # | grep 'vim\|emacs'
      if not string match -q -r '\$\(' $line
        set_color -b normal $powerline_blue2
        echo $line
        set_color -b normal normal
        eval "$line"
      else
        echo ERROR: $line
      end
    end
    rm -f ~/.active_aliases
  end
#+end_src

* completions

** ~/.config/fish/completions/dhcpcd-restart.fish

#+begin_src fish :tangle "~/.config/fish/completions/dhcpcd-restart.fish"
  complete --command dhcpcd-restart --no-files --arguments "(dhcpcd-restart)"
#+end_src
